[template generate Type type]
[output.java type.packageName type.defName]
  [if type.emptyNesting]
[generateImmutableNestingType type]
  [else]
[generateImmutableSimpleType type]
  [/if]
[/output.java]
[/template]

[template generateImmutableNestingType Type type]
[if type.packageName]
package [type.packageName];
[/if]

/**
 * {@code [type.defName]} contains immutable implementation classes generated from
 * abstract value types defined as nested inside {@link [type.name]}.
[for v in type.nestedChildren]
 * @see [v.immutableReferenceName]
[/for]
 */
@SuppressWarnings({"all", "nullness"})
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"Immutables.generator", "[type.name]"})
[type.accessPrefix]final class [type.defName] {
  private [type.defName]() {}
[for v in type.nestedChildren]
  [generateImmutableType v 'static ']
[/for]
}
[/template]

[template generateImmutableSimpleType Type type]
[if type.packageName]
package [type.packageName];
[/if]

[generateImmutableType type '']
[/template]

[template generateImmutableType Type type String classModifiers]

[for setters = type.settableAttributes]
/**
 * Immutable implementation of {@link [type.name]}.
 * <p>
 * Use static factory methods to create instances: {@code of()} or
 * {@code builder()}.
 */
@SuppressWarnings({"all", "nullness"})
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"Immutables.generator", "[type.name]"})
@javax.annotation.concurrent.Immutable
[type.accessPrefix][classModifiers]final class [type.defName]
    [type.inheritsKeyword] [type.name] {
[if type.annotationType]
  [defaultAnnotationValues type]
[/if]
[if type.useInterned or type.generateOrdinalValue]

  private static class InternProxy {
    final [type.defName] instance;

    InternProxy([type.defName] instance) {
      this.instance = instance;
    }

    public boolean equals(@javax.annotation.Nullable Object another) {
      assert another instanceof InternProxy;
      return instance.equalTo(((InternProxy) another).instance);
    }

    public int hashCode() {
      return instance.computeHashCode();
    }
  }
[/if]
[if type.generateOrdinalValue]

  /**
   * Copy constructor used for interning of objects implementing
   * {@link org.immutables.common.collect.OrdinalValue}
   */
  private [type.defName]([type.defName] instance, int ordinal) {
  [for v in type.implementedAttributes]
    this.[v.name] = instance.[v.name];
  [/for]
  [if type.usePrehashed]
    this.hashCode = instance.hashCode;
  [/if]
    this.domain = instance.domain;
    this.ordinal = ordinal;
  }

  /**
   * Instances of {@code [type.defName]} will be interned and registered with the domain.
   */
  public static final class Domain
      extends org.immutables.common.collect.internal.InterningOrdinalDomain<InternProxy, [type.name]> {

    private static final Domain INSTANCE = new Domain();

    /** Construct ordinal domain of [type.name] values. */
    public Domain() {
    }

    protected [type.name] extractValue(InternProxy proxy, int ordinal) {
      return new [type.defName](proxy.instance, ordinal);
    }

    @Override
    public String toString() {
      if (this == INSTANCE) {
        return "[type.defName].Domain.get()";
      }
      return com.google.common.base.MoreObjects.toStringHelper("[type.defName].Domain")
        .add("length", length())
        .toString();
    }

    /**
     * Gets static singleton instance of {@link OrdinalDomain}.
     * All instances that was not build with specified domain will be bound to static domain.
     * @return ordinal domain of all instances
     */
    public static Domain get() {
      return INSTANCE;
    }
  }

  @Override
  public org.immutables.common.collect.OrdinalDomain<[type.name]> domain() {
    return domain;
  }

  private static [type.defName] intern([type.defName] instance) {
    return ([type.defName]) instance.domain.internOrdinal(new InternProxy(instance));
  }
[else if type.useInterned]

  private static final com.google.common.collect.Interner<InternProxy> INTERNER = com.google.common.collect.Interners.newStrongInterner();

  private static [type.defName] intern([type.defName] instance) {
    return INTERNER.intern(new InternProxy(instance)).instance;
  }
[/if]
[if type.useConstructor]

  /**
   * Constructs new immutable instance of [type.name].
[for v in type.constructorArguments]
   * @param [v.name] value for {@code [v.name]}
[/for]
   * @return immutable [type.name] instance
   */
  public static [type.defName] of([for v in type.constructorArguments][if not for.first], [/if][v.atNullability][v.type] [v.name][/for]) {
    return checkPreconditions(new [type.defName]([for v in type.constructorArguments][if not for.first], [/if][v.name][/for]));
  }
[/if]

  private static [type.defName] checkPreconditions([type.defName] instance) {
[if type.validationMethodName]
    instance.[type.validationMethodName]();
[/if]
[if type.useInterned or type.generateOrdinalValue]
    instance = intern(instance);
[/if]
    return instance;
  }
[if type.useSingleton]

  private static final [type.defName] INSTANCE = checkPreconditions(new [type.defName]());

  /**
   * Returns default immutable singleton value of [type.defName]
   * @return immutable instance of [type.name]
   */
  public static [type.defName] of() {
    return INSTANCE;
  }
[/if]
  [generateCopyOf type]
[generateImmutable type]
[generateLazyValues type]
[if type.useBuilder]

  /**
   * Creates builder for {@link [type.name]}.
   * @return new [type.name] builder
   */
  public static Builder builder() {
    return new Builder();
  }
  [generateBuilder type]
[/if]
[if type.hasNestedChildren]
[for v in type.nestedChildren]
  [generateImmutableType  v 'static ']
[/for]
[/if]
}
[/for]
[/template]

[template generateCopyOf Type type]
[if type.useBuilder or type.useConstructor]

/**
 * Creates immutable copy of [type.name]. Uses accessors to get values to initialize new immutable instance.
 * If instance is already immutable, it returns it unchanged.
 */
public static [type.defName] copyOf([type.name] instance) {
  if (instance instanceof [type.defName]) {
    return ([type.defName]) instance;
  }
[if type.useBuilder]
  com.google.common.base.Preconditions.checkNotNull(instance);
  return builder()
  [for v in type.settableAttributes]
    [if v.collectionType]
      .[v.names.addAll](instance.[v.names.get]())
    [else if v.mapType]
      .[v.names.putAll](instance.[v.names.get]())
    [else]
      .[v.names.init](instance.[v.names.get]())
    [/if]
  [/for]
      .build();
[else]
  return of([for v in type.constructorArguments][if not for.first], [/if]instance.[v.names.get]()[/for])[if type.useCopyMethods][for
          o in type.constructorOmited if o.generateDefault or o.generateAbstract]
      .[o.names.with](instance.[o.names.get]())[/for][/if];
[/if]
}

/**
 * @deprecated Already an immutable object, no need to create immutable copy
 */
@Deprecated
public static [type.defName] copyOf([type.defName] instance) {
  return com.google.common.base.Preconditions.checkNotNull(instance);
}
[/if]
[/template]

[template generateLazyValues Type type]
[for lz = type.lazyAttributes]
  [if lz][for LongPositions positions = longsFor lz]
  [for l in positions.longs]
  @javax.annotation.concurrent.GuardedBy("this")
  private volatile long lazyInitBitmap[l.index];
  [/for]
  [for l in lz, BitPosition pos = positions l]
  [let maskConstantName][toConstant l.name]_LAZY_INIT_BIT[/let]
  [let bitmapFieldName]lazyInitBitmap[pos.index][/let]

  private static final long [maskConstantName] = [literal.hex pos.mask];

  @javax.annotation.concurrent.GuardedBy("this")
  private [l.type] [l.name];

  @Override
  public [l.type] [l.names.get]() {
    if (([bitmapFieldName] & [maskConstantName]) == 0) {
      synchronized (this) {
        if (([bitmapFieldName] & [maskConstantName]) == 0) {
            [if l.primitive]
          this.[l.name] = super.[l.names.get]();
            [else]
          this.[l.name] = com.google.common.base.Preconditions.checkNotNull(super.[l.names.get]());
            [/if]
          [bitmapFieldName] |= [maskConstantName];
        }
      }
    }
    return [l.name];
  }
  [/for]
  [/for][/if]
[/for]
[/template]

[template generateBuilder Type type]
[for setters = type.settableAttributes,
     getters = type.implementedAttributes,
     mandatories = type.mandatoryAttributes,
     LongPositions positions = longsFor mandatories,
     primdefs = type.primitiveDefaultAttributes,
     LongPositions defpos = longsFor primdefs]

/**
 * Builds instances of {@link [type.name]}.
 * Initialized attributes and then invoke {@link #build()} method to create
 * immutable instance.
 * <p><em>Builder is not thread safe and generally should not be stored in field or collection,
 * but used immediately to create instances.</em>
 */
@javax.annotation.concurrent.NotThreadSafe
[if type.hasAbstractBuilder]
[type.accessPrefix]static final class Builder
    extends [type.name].Builder {
[else]
[type.accessPrefix]static final class Builder {
[/if]
  private Builder() {}

  [for l in defpos.longs]
  private long nondefaultBitset[l.index];
  [/for]
  [for p in primdefs, BitPosition pos = defpos p]
  private static final long NONDEFAULT_BIT_[toConstant p.name] = [literal.hex pos.mask];

  private boolean [p.name]IsSet() {
    return (nondefaultBitset[pos.index] & NONDEFAULT_BIT_[toConstant p.name]) != 0;
  }
  [/for]
  [let nondefaultSetInBuilder Attribute v]
  [if v.primitive and v.generateDefault][for BitPosition pos = defpos v]
    nondefaultBitset[pos.index] |= NONDEFAULT_BIT_[toConstant v.name];
  [/for][/if]
  [/let]
  [for l in positions.longs]
  private long initializedBitset[l.index];
  private static final long INITIALIZED_BITSET_ALL_[l.index] = [literal.hex l.occupation];
  [/for]
  [for m in mandatories, BitPosition pos = positions m]
  private static final long INITIALIZED_BIT_[toConstant m.name] = [literal.hex pos.mask];

  private boolean [m.name]IsSet() {
    return (initializedBitset[pos.index] & INITIALIZED_BIT_[toConstant m.name]) != 0;
  }
  [/for]
  [let mandatorySetInBuilder Attribute v]
  [if v.mandatory][for BitPosition pos = positions v]
    initializedBitset[pos.index] |= INITIALIZED_BIT_[toConstant v.name];
  [/for][/if]
  [/let]
  [for v in setters]
[if v.collectionType]
  private com.google.common.collect.Immutable[v.rawCollectionType].Builder<[v.elementType]> [v.name]Builder =
      com.google.common.collect.Immutable[v.rawCollectionType].builder();
[else if v.optionalType]
  private [v.type] [v.name] = com.google.common.base.Optional.absent();
[else if v.mapType]
  private com.google.common.collect.ImmutableMap.Builder<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name]Builder =
      com.google.common.collect.ImmutableMap.builder();
[else if v.primitive]
  private [v.type] [v.name];
[else]
  private @javax.annotation.Nullable [v.type] [v.name];
[/if]
  [/for]
  [if type.generateOrdinalValue]
  private Domain domain = Domain.get();

  public Builder domain(Domain domain) {
    this.domain = com.google.common.base.Preconditions.checkNotNull(domain);
    return this;
  }
  [/if]

  @Override
  public String toString() {
    return com.google.common.base.MoreObjects.toStringHelper("[type.simpleName].Builder")
        .omitNullValues()
  [for v in setters]
    [if v.collectionType or v.mapType]
        .add("[v.name]", [v.name]Builder.build())
    [else if v.optionalType]
        .add("[v.name]", [v.name].orNull())
    [else if v.arrayType]
        .add("[v.name]", java.util.Arrays.toString([v.name]))
    [else if v.primitive]
        .add("[v.name]", [v.name]IsSet() ? [v.name] : null)
    [else]
        .add("[v.name]", [v.name])
    [/if]
  [/for]
        .toString();
  }
  [for v in setters]
  [if v.collectionType]

  /**
   * Adds one element to {@link [type.name]#[v.names.get]()} [toLower v.rawCollectionType].
   * @param element [v.name] element
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.add]([v.unwrappedElementType] element) {
    [v.name]Builder.add(element);
    return this;
  }

  /**
   * Adds elements to {@link [type.name]#[v.names.get]()} [toLower v.rawCollectionType].
   * @param elements array of [v.name] elements
   * @return {@code this} builder for chained invocation
   */
  [if v.nonRawElemementType]@SafeVarargs[/if]
  public final Builder [v.names.add]([v.unwrappedElementType]... elements) {
    [v.name]Builder.addAll([immutableCollectionCopyOf v][arrayAsList v 'elements'][/immutableCollectionCopyOf]);
    return this;
  }

  /**
   * Adds elements to {@link [type.name]#[v.names.get]()} [toLower v.rawCollectionType].
   * @param elements iterable of [v.name] elements
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.addAll](Iterable<[v.consumedElementType]> elements) {
    [v.name]Builder.addAll(elements);
    return this;
  }
  [else if v.optionalType]

  /**
   * Initializes present value for optional {@link [type.name]#[v.names.get]()}.
   * @param [v.name] value for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.init]([v.unwrappedElementType] [v.name]) {
    this.[v.name] = com.google.common.base.Optional.of([v.name]);
    return this;
  }

  /**
   * Initializes optional value for {@link [type.name]#[v.name]()}.
   * @param [v.name] value for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.init](com.google.common.base.Optional<[v.wrappedElementType]> [v.name]) {
    this.[v.name] = com.google.common.base.Preconditions.checkNotNull([v.name]);
    return this;
  }
  [else if v.mapType]
    [for gE = v.consumedElementType, uK = v.unwrappedElementType, wK = v.wrappedElementType, uV = v.unwrappedSecondaryElementType, wV = v.wrappedSecondaryElementType]

  /**
   * Put one entry to {@link [type.name]#[v.names.get]()} map.
   * @param key the key in [v.name] map
   * @param value the associated value in [v.name] map
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.put]([uK] key, [uV] value) {
    [v.name]Builder.put(key, value);
    return this;
  }

  /**
   * Put one entry to {@link [type.name]#[v.names.get]()} map. Nulls are not permitted
   * @param entry the key and value entry
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.put](java.util.Map.Entry<[gE], ? extends [wV]> entry) {
    [v.name]Builder.put(entry);
    return this;
  }

  /**
   * Put all mappings from specified map as entries to {@link [type.name]#[v.names.get]()} map. Nulls are not permitted
   * @param entries to be added to [v.name] map
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.putAll](java.util.Map<[gE], ? extends [wV]> entries) {
    [v.name]Builder.putAll(entries);
    return this;
  }

    [/for]
  [else if v.arrayType]

  /**
   * Initializes value for {@link [type.name]#[v.names.get]()}.
  [if v.generateDefault]
   * <p><em>If not set, this attribute will have default value as defined by {@link [type.name]#[v.names.get]()}.</em>
  [/if]
   * @param elements elements for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  [if v.nonRawElemementType]@SafeVarargs[/if]
  public final Builder [v.names.init]([v.elementType]... elements) {
    this.[v.name] = elements.clone();
    [mandatorySetInBuilder v]
    return this;
  }
  [else]

  /**
   * Initializes value for {@link [type.name]#[v.names.get]()}.
  [if v.generateDefault]
   * <p><em>If not set, this attribute will have {@link [type.name]#[v.names.get]() default value}.</em>
  [/if]
   * @param [v.name] value for [v.name][if not v.nullable], non-null[/if]
   * @return {@code this} builder for chained invocation
   */
  public final Builder [v.names.init]([v.atNullability][v.type] [v.name]) {
    [if v.primitive or v.nullable]
    this.[v.name] = [v.name];
    [else]
    this.[v.name] = com.google.common.base.Preconditions.checkNotNull([v.name]);
    [/if]
    [nondefaultSetInBuilder v]
    [mandatorySetInBuilder v]
    return this;
  }
  [/if]
  [/for]
  [if positions.longs]

  private void checkRequiredAttributes() {
    if ([for l in positions.longs][if not for.first]
        | [/if]initializedBitset[l.index] != INITIALIZED_BITSET_ALL_[l.index][/for]) {
      throw new IllegalStateException(
          com.google.common.base.MoreObjects.toStringHelper("Cannot build [type.name], some of required attributes are not set ")
              .omitNullValues()
            [for m in mandatories]
              .addValue(![m.name]IsSet() ? "[m.name]" : null)
            [/for]
              .toString());
    }
  }
  [/if]

  /**
   * Builds new {@link [type.name]}.
   * @return immutable instance of [type.name]
   */
  public [type.defName] build() {
    [if positions.longs]
    checkRequiredAttributes();
    [/if]
    return checkPreconditions(new [type.defName](this));
  }
}
[/for]
[/template]

[template generateConstructorDefaultAttributes Type type Attribute... attributes]
[for v in attributes if not (v.generateDefault or v.generateDerived), n = v.name]
  [if v.optionalType]
this.[n] = com.google.common.base.Optional.absent();
  [else if v.mapType]
this.[n] = com.google.common.collect.ImmutableMap.of();
  [else if v.collectionType]
this.[n] = com.google.common.collect.Immutable[v.rawCollectionType].of();
  [else if v.nullable]
this.[n] = null;
  [else]
    [output.error]
      Could not generate constructor. Attribute '[v.name]' [v.generateDefault] does not have default value.
    [/output.error]
  [/if]
[/for]
[for v in attributes if v.generateDefault or v.generateDerived, n = v.name]
[if type.annotationType]
this.[n] = DEFAULT_VALUE_[toConstant v.name];
[else]
  [if v.primitive or v.nullable]
this.[n] = super.[v.names.get]();
  [else]
this.[n] = com.google.common.base.Preconditions.checkNotNull(super.[v.names.get]());
  [/if]
[/if]
[/for]
[/template]

[template generateImmutable Type type]
[for setters = type.settableAttributes, getters = type.implementedAttributes]
[for v in getters]
  private final [v.atNullability][v.implementationType] [v.name];
[/for]
[if type.usePrehashed]
  private final int hashCode;
[/if]
[if type.generateOrdinalValue]
  private final int ordinal;
  private final Domain domain;
[/if]
[if type.useSingleton]

  private [type.defName]() {
    [generateConstructorDefaultAttributes type type.implementedAttributes]
    [generateAfterConstruction type false]
  }
[/if]
[if type.useConstructor]

  private [type.defName]([for v in type.constructorArguments][if not for.first],[/if]
      [v.atNullability][v.type] [v.name][/for]) {
[for v in type.constructorArguments, n = v.name]
  [if v.collectionType or v.mapType]
    this.[n] = [immutableCollectionCopyOf v n];
  [else if v.primitive or v.nullable]
    this.[n] = [n];
  [else]
    this.[n] = com.google.common.base.Preconditions.checkNotNull([n]);
  [/if]
[/for]
    [generateConstructorDefaultAttributes type type.constructorOmited]
    [generateAfterConstruction type false]
  }
[/if]
[if type.useBuilder]

  private [type.defName](Builder builder) {
[for v in getters if not v.generateDerived, n = v.name]
  [if v.generateOrdinalValueSet or (v.generateEnumSet or v.generateEnumMap)]
    this.[n] = [immutableCollectionCopyOf v]builder.[n]Builder.build()[/immutableCollectionCopyOf];
  [else if v.collectionType or v.mapType]
    this.[n] = builder.[n]Builder.build();
  [else if not v.generateDefault]
    this.[n] = builder.[n];
  [/if]
[/for]
[-- Generate default values comes after required values]
[for v in getters, n = v.name]
[if v.generateDefault]
  [if v.primitive]
    this.[n] = builder.[n]IsSet()
        ? builder.[n]
      [if type.annotationType]
        : DEFAULT_VALUE_[toConstant v.name];
      [else]
        : super.[v.names.get]();
      [/if]
  [else]
    this.[n] = builder.[n] != null
        ? builder.[n]
      [if type.annotationType]
        : DEFAULT_VALUE_[toConstant v.name];
      [else if v.nullable]
        : super.[v.names.get]();
      [else]
        : com.google.common.base.Preconditions.checkNotNull(super.[v.names.get]());
      [/if]
  [/if]
[else if v.generateDerived]
  [if v.primitive or v.nullable]
    this.[n] = super.[v.names.get]();
  [else]
    this.[n] = com.google.common.base.Preconditions.checkNotNull(super.[v.names.get]());
  [/if]
[/if]
[/for]
    [generateAfterConstruction type true]
  }
[/if]
[if type.useCopyMethods]

  private [type.defName](
      [type.defName] original[for v in getters],
      [v.atNullability][v.implementationType] [v.name][/for]) {
  [for v in getters]
    this.[v.name] = [v.name];
  [/for]
    [generateAfterConstruction type false]
  }
  [generateCopyMethods type]
[/if]
  [generateAccessorMethods type]
  [generateObjectUtilityMethods type]
  [generateJacksonMapped type]
[/for]
[/template]

[template generateJacksonMapped Type type]
[if type.generateJacksonMapped]
[if not type.useBuilder]
  [output.error]Cannot use @Jackson.Mapped without builder enabled[/output.error]
[/if]
[if not type.generateMarshaled]
  [output.error]Cannot use @Jackson.Mapped without @Json.Marshaled annotation[/output.error]
[/if]
[let marshalerInstance][type.simpleName]Marshaler.instance()[/let]

@com.fasterxml.jackson.annotation.JsonValue
public com.fasterxml.jackson.databind.util.TokenBuffer toTokenBuffer() throws java.io.IOException {
  return org.immutables.common.marshal.internal.MarshalingSupport.toTokenBuffer([marshalerInstance], this);
}

@com.fasterxml.jackson.annotation.JsonCreator
public static [type.defName] fromTokenBuffer(java.util.Map<String, com.fasterxml.jackson.databind.util.TokenBuffer> buffers) throws java.io.IOException {
  return copyOf(org.immutables.common.marshal.internal.MarshalingSupport.fromTokenBuffers([marshalerInstance], buffers));
}
[/if]
[/template]

[template generateAccessorMethods Type type]
[if type.annotationType]

/**
 * {@inheritDoc}
 * @return reflection class instance {@code [type.name].class}
 */
@Override
public Class<? extends java.lang.annotation.Annotation> annotationType() {
  return [type.valueTypeName].class;
}
[/if]
  [for v in type.implementedAttributes]
[for line in v.annotations]
[line]
[/for]
@Override
public [v.implementationType] [v.names.get]() {
[if v.arrayType]
  return [v.name].clone();
[else]
  return [v.name];
[/if]
}
  [/for]
[generateGetters type]
  [if type.generateOrdinalValue]

@Override
public int ordinal() {
  return ordinal;
}
  [/if]
[/template]

[template generateObjectUtilityMethods Type type]
[let equalToType][if type.annotationType][type.valueTypeName][else][type.defName][/if][/let]
[for getters = type.equivalenceAttributes]
[if not type.equalToDefined]

@Override
public boolean equals(@javax.annotation.Nullable Object another) {
  [if type.useInterned or type.generateOrdinalValue]
  return this == another;
  [else]
  return this == another
      || (another instanceof [equalToType] && equalTo(([equalToType]) another));
  [/if]
}
[/if]

private boolean equalTo([equalToType] another) {
  return [if not getters]true[/if][for v in getters][if not for.first]
      && [/if][equalsAttribute v type.annotationType][/for];
}
[if type.annotationType]

private int computeHashCode() {
  int h = 0;
[for v in getters]
[if v.arrayType]
  h += 127 * "[v.name]".hashCode() ^ java.util.Arrays.hashCode([v.name]);
[else if not v.primitive]
  h += 127 * "[v.name]".hashCode() ^ [v.name].hashCode();
[else if v.type eq 'int']
  h += 127 * "[v.name]".hashCode() ^ [v.name];
[else]
  h += 127 * "[v.name]".hashCode() ^ com.google.common.primitives.[toUpper v.type]s.hashCode([v.name]);
[/if]
[/for]
  return h;
}
[else]

private int computeHashCode() {
  int h = 31;
  [if getters.isEmpty]
  h = h * 17 + "[type.name]".hashCode();
  [else]
[for v in getters]
[if v.nullable]
  h = h * 17 + com.google.common.base.Objects.hashCode([v.name]);
[else if v.arrayType]
  h = h * 17 + java.util.Arrays.hashCode([v.name]);
[else if not v.primitive]
  h = h * 17 + [v.name].hashCode();
[else if v.type eq 'int']
  h = h * 17 + [v.name];
[else]
  h = h * 17 + com.google.common.primitives.[toUpper v.type]s.hashCode([v.name]);
[/if]
[/for]
  [/if]
  return h;
}
[/if]
[if not type.hashCodeDefined]

@Override
public int hashCode() {
  [if type.usePrehashed]
  return hashCode;
  [else]
  return computeHashCode();
  [/if]
}
[/if]
[/for]
[generateToString type]
[/template]

[template generateToString Type type]
[if not type.toStringDefined]

@Override
public String toString() {
  return com.google.common.base.MoreObjects.toStringHelper("[if type.annotationType]@[/if][type.simpleName]")
      .omitNullValues()
  [for v in type.equivalenceAttributes]
  [if v.optionalType]
      .add("[v.name]", [v.name].orNull())
  [else if v.arrayType]
      .add("[v.name]", java.util.Arrays.toString([v.name]))
  [else]
      .add("[v.name]", [v.name])
  [/if]
  [/for]
      .toString();
}
[/if]
[/template]

[template generateAfterConstruction Type type Boolean usingBuilder]
  [if type.usePrehashed]
this.hashCode = this.computeHashCode();
  [/if]
  [if type.generateOrdinalValue][-- Assigning dummy ordinal value to be changed on interning --]
this.ordinal = 0;
    [if usingBuilder]
this.domain = builder.domain;
    [else]
[-- Default static ordinal domain --]
this.domain = Domain.get();
    [/if]
  [/if]
[/template]

[template generateReturnCopyContextual Type type Attribute modified]
return checkPreconditions(new [type.defName](
    this[for a in type.implementedAttributes],
    [if a.name eq modified.name]newValue[else]this.[a.name][/if][/for]));
[/template]

[template generateCopyMethods Type type]
  [for v in type.settableAttributes]
    [if v.arrayType]

/**
 * Copy current immutable object with elements that replace content of {@link [type.name]#[v.names.get]()}.
 * Array is cloned before saved as the attribute value.
 * @param elements elements for [v.name], not null
 * @return modified copy of {@code this} object
 */
[if v.nonRawElemementType]@SafeVarargs[/if]
public final [type.defName] [v.names.with]([v.elementType]... elements) {
  [v.implementationType] newValue = elements.clone();
  [generateReturnCopyContextual type v]
}
    [else if v.collectionType]

/**
 * Copy current immutable object with elements that replace content of {@link [type.name]#[v.names.get]()}.
 * @param elements elements to set
 * @return modified copy of {@code this} object
 */
[if v.nonRawElemementType]@SafeVarargs[/if]
public final [type.defName] [v.names.with]([v.unwrappedElementType]... elements) {
  [v.implementationType] newValue = [immutableCollectionCopyOf v][arrayAsList v 'elements'][/immutableCollectionCopyOf];
  [generateReturnCopyContextual type v]
}

/**
 * Copy current immutable object with elements that replace content of {@link [type.name]#[v.names.get]()}.
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param elements iterable of [v.name] elements to set
 * @return modified copy of {@code this} object
 */
public final [type.defName] [v.names.with](Iterable<[v.consumedElementType]> elements) {
  if (this.[v.name] == elements) {
    return this;
  }
  [v.implementationType] newValue = [immutableCollectionCopyOf v 'elements'];
  [generateReturnCopyContextual type v]
}
    [else if v.optionalType]

/**
 * Copy current immutable object by setting present value for optional {@link [type.name]#[v.names.get]()}.
 * @param value value for [v.name], non-null
 * @return modified copy of {@code this} object
 */
public final [type.defName] [v.names.with]([v.unwrappedElementType] value) {
  [v.implementationType] newValue = com.google.common.base.Optional.of(value);
  [generateReturnCopyContextual type v]
}

/**
 * Copy current immutable object by setting optional value for {@link [type.name]#[v.names.get]()}.
 * Shallow reference equality check on optional value is used to prevent copying of the same value by returning {@code this}.
 * @param optional value for [v.name], non-null
 * @return modified copy of {@code this} object
 */
public final [type.defName] [v.names.with](com.google.common.base.Optional<[v.wrappedElementType]> optional) {
  if (this.[v.name] == optional) {
    return this;
  }
  [v.implementationType] newValue = com.google.common.base.Preconditions.checkNotNull(optional);
  [generateReturnCopyContextual type v]
}
    [else if v.mapType]
    [for gE = v.consumedElementType, uK = v.unwrappedElementType, wK = v.wrappedElementType, uV = v.unwrappedSecondaryElementType, wV = v.wrappedSecondaryElementType]

/**
 * Copy current immutable object by replacing {@link [type.name]#[v.names.get]()} map with specified map.
 * Nulls are not permitted as keys or values.
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param entries to be added to [v.name] map
 * @return modified copy of {@code this} object
 */
public final [type.defName] [v.names.with](java.util.Map<[gE], ? extends [wV]> entries) {
  if (this.[v.name] == entries) {
    return this;
  }
  [v.implementationType] newValue = [immutableCollectionCopyOf v 'entries'];
  [generateReturnCopyContextual type v]
}
    [/for]
    [else]

/**
 * Copy current immutable object by setting value for {@link [type.name]#[v.names.get]()}.
 [if v.primitive and (not v.floatType)]
 * Value equality check is used to prevent copying of the same value by returning {@code this}.
 [else if not v.primitive]
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 [/if]
 * @param value new value for [v.name][if not v.nullable], non-null[/if]
 * @return modified copy of the {@code this} object
 */
public final [type.defName] [v.names.with]([v.atNullability][v.type] value) {
    [if not v.floatType]
  if (this.[v.name] == value) {
    return this;
  }
    [/if]
    [if v.nullable or v.primitive]
  [v.atNullability][v.implementationType] newValue = value;
    [else]
  [v.implementationType] newValue = com.google.common.base.Preconditions.checkNotNull(value);
    [/if]
  [generateReturnCopyContextual type v]
}
    [/if]
  [/for]
[/template]

[template generateGetters Type type]
  [if type.generateGetters]
    [for v in type.allAccessibleAttributes]

/**
 * Gets the value of {@link [type.name]#[v.names.get]()} attribute.
[if v.optionalType]
 * @return value of [v.name] if present, {@code null} if absent
[else]
 * @return value for [v.name], non-null
[/if]
 */
  [for line in v.annotations]
[line]
  [/for]
  [if v.optionalType]
@javax.annotation.Nullable
public [v.wrappedElementType] get[toUpper v.name]() {
  return [v.name]().orNull();
}
  [else]
public [v.implementationType] [if v.boolean]is[else]get[/if][toUpper v.name]() {
  return [v.name]();
}
  [/if]
    [/for]
  [/if]
[/template]

[template defaultAnnotationValues Type type]
[for a in type.implementedAttributes if a.generateDefault]
private static final [a.type] DEFAULT_VALUE_[toConstant a.name];
[/for]

static {
  try {
  [for a in type.implementedAttributes if a.generateDefault]
    DEFAULT_VALUE_[toConstant a.name] =
        cast([type.valueTypeName].class.getDeclaredMethod("[a.name]").getDefaultValue());
  [/for]
  } catch(Exception e) {
    throw new ExceptionInInitializerError(e);
  }
}

@SuppressWarnings("unchecked")
private static <T> T cast(Object object) {
  return (T) object;
}
[/template]

[template immutableCollectionCopyOf Attribute a String expression][output.trim]
[if a.generateEnumSet]
  com.google.common.collect.Sets.immutableEnumSet([expression])
[else if a.generateOrdinalValueSet]
  org.immutables.common.collect.ImmutableOrdinalSet.copyOf([expression])
[else if a.collectionType]
  com.google.common.collect.Immutable[a.rawCollectionType].copyOf([expression])
[else if a.generateEnumMap]
  com.google.common.collect.Maps.immutableEnumMap([expression])
[else if a.mapType]
  com.google.common.collect.ImmutableMap.copyOf([expression])
[else]
  [expression]
[/if]
[/output.trim][/template]

[template equalsAttribute Attribute a Boolean useAccessor][output.trim]
[let getOther]another.[if useAccessor][a.names.get]()[else][a.name][/if][/let]
[if a.float]
  Float.floatToIntBits([a.name]) == Float.floatToIntBits([getOther])
[else if a.double]
  Double.doubleToLongBits([a.name]) == Double.doubleToLongBits([getOther])
[else if a.primitive]
  [a.name] == [getOther]
[else if a.arrayType]
  java.util.Arrays.equals([a.name], [getOther])
[else if a.nullable]
  com.google.common.base.Objects.equal([a.name], [getOther])
[else]
  [a.name].equals([getOther])
[/if]
[/output.trim][/template]

[template arrayAsList Attribute a String expression][output.trim]
[if a.unwrappedElementPrimitiveType]
  com.google.common.primitives.[toUpper a.unwrappedElementType]s.asList([expression])
[else]
  java.util.Arrays.asList([expression])
[/if]
[/output.trim][/template]
