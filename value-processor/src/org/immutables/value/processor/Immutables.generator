[template generate]
  [for type in values.values]
    [if type.constitution.hasTopLevelImmutable]
[-- Top level immutable type --]
[output.java type.package type.typeImmutable.simple]
[generateImmutable type true]
[/output.java]
    [/if]
    [if type.constitution.hasTopLevelBuilder]
[-- Top level builder --]
[output.java type.package type.typeBuilder.simple]
[generateBuilder type true]
[/output.java]
    [/if]
    [if type.constitution.hasEnclosingNonvalue]
[-- Enclosing non-value type --]
[output.java type.package type.typeEnclosing.simple]
[generateEnclosing type]
[/output.java]
    [/if]
  [/for]
[/template]

[template atNullable][if classpath.available 'javax.annotation.Nullable']@javax.annotation.Nullable [/if][/template]

[template annotationsWhenTopLevel Type type Boolean is]
[if is]
@SuppressWarnings("all")
[if classpath.available 'javax.annotation.Nullable']
@javax.annotation.ParametersAreNonnullByDefault
[/if]
[if classpath.available 'javax.annotation.Generated']
@javax.annotation.Generated({"Immutables.generator", "[type.typeAbstract.relative]"})
[/if]
[/if]
[/template]

[template packageWhenTopLevel Type type Boolean is]
[if is and type.package]
package [type.package];
[/if]
[/template]

[template generateEnclosing Type type]
[packageWhenTopLevel type true]

/**
 * {@code [type.typeEnclosing.simple]} contains immutable implementation classes generated from
 * abstract value types defined as nested inside {@link [type.typeAbstract.relative]}.
[for v in type.nested]
 * @see [v.typeImmutable.relative]
[/for]
 */
[annotationsWhenTopLevel type true]
[type.typeEnclosing.access]final class [type.typeEnclosing.simple] {
  private [type.typeEnclosing.simple]() {}
[for v in type.nested]
  [generateImmutable v false]
  [if v.constitution.isOutsideBuilder]
  [generateBuilder v false]
  [/if]
  [forwardingEnclosingFactoryMethods v]
[/for]
}
[/template]

[template generateImmutable Type type Boolean topLevel]
[packageWhenTopLevel type topLevel]

[for setters = type.settableAttributes]
/**
 * Immutable implementation of {@link [type.typeAbstract.relative]}.
 * <p>
 [if type.useBuilder]
 * Use builder to create immutable instances:
 * {@code [type.factoryBuilder.relative]()}.
 [/if]
 [if type.useConstructor]
 * Use static factory method to create immutable instances:
 * {@code [type.factoryOf.relative]()}.
 [/if]
 [if type.useSingleton]
 * Use static factory method to get default singleton instance:
 * {@code [type.factoryInstance.relative]()}.
 [/if]
 */
[annotationsWhenTopLevel type topLevel]
[if classpath.available 'javax.annotation.concurrent.Immutable']
@javax.annotation.concurrent.Immutable
[/if]
[type.typeImmutable.access][if not topLevel]static [/if]final class [type.typeImmutable.simple]
    [type.inheritsKeyword] `[type.typeAbstract] {
[if type.annotationType]
  [defaultAnnotationValues type]
[/if]
[generateImmutableMembers type]
[generateLazyValues type]
[generateSingletonInstance type]
[generateConstructionAndInterning type]
  [generateImmutableCopyOf type]
[if type.useBuilder and (not type.constitution.isOutsideBuilder)]
  [if type.names.builder ne 'new']

  /**
   * Creates builder for {@link [type.typeValue]}.
   * @return new [type.typeValue.simple] builder
   */
  [type.typeImmutable.access]static [type.typeBuilder.relative] [type.names.builder]() {
    return new [type.typeBuilder.relative]();
  }
  [/if]
  [generateBuilder type false]
[/if]
[for v in type.nested]
  [generateImmutable v false]
[/for]
}
[/for]
[/template]

[template generateConstructionAndInterning Type type]
[if type.useInterned or type.generateOrdinalValue]

  private static class InternProxy {
    final [type.typeImmutable.simple] instance;

    InternProxy([type.typeImmutable.simple] instance) {
      this.instance = instance;
    }

    public boolean equals([atNullable]Object another) {
      assert another instanceof InternProxy;
      return instance.equalTo(((InternProxy) another).instance);
    }

    public int hashCode() {
      return instance.computeHashCode();
    }
  }
[/if]
[if type.generateOrdinalValue]

  /**
   * Copy constructor used for interning of objects implementing
   * {@link org.immutables.common.collect.OrdinalValue}
   */
  private [type.typeImmutable.simple]([type.typeImmutable.simple] instance, int ordinal) {
  [for v in type.implementedAttributes]
    this.[v.name] = instance.[v.name];
  [/for]
  [if type.usePrehashed]
    this.hashCode = instance.hashCode;
  [/if]
    this.domain = instance.domain;
    this.ordinal = ordinal;
  }

  /**
   * Instances of {@code [type.name]} will be interned and registered with the domain.
   */
  public static final class Domain
      extends org.immutables.common.collect.internal.InterningOrdinalDomain<InternProxy, [type.typeAbstract.relative]> {

    private static final Domain INSTANCE = new Domain();

    /** Construct ordinal domain of [type.name] values. */
    public Domain() {}

    protected [type.name] extractValue(InternProxy proxy, int ordinal) {
      return new [type.typeImmutable.simple](proxy.instance, ordinal);
    }

    @Override
    public String toString() {
      if (this == INSTANCE) {
        return "[type.typeImmutable.simple].Domain.get()";
      }
      return [type.typeMoreObjects].toStringHelper("[type.typeImmutable.simple].Domain")
        .add("length", length())
        .toString();
    }

    /**
     * Gets static singleton instance of {@link OrdinalDomain}.
     * All instances that was not build with specified domain will be bound to static domain.
     * @return ordinal domain of all instances
     */
    public static Domain get() {
      return INSTANCE;
    }
  }

  @Override
  public org.immutables.common.collect.OrdinalDomain<[type.typeAbstract.relative]> domain() {
    return domain;
  }

  private static [type.typeImmutable.simple] intern([type.typeImmutable.simple] instance) {
    return ([type.typeImmutable.simple]) instance.domain.internOrdinal(new InternProxy(instance));
  }
[else if type.useInterned]
  [if type.generateJdkOnly]

  private static final java.util.concurrent.ConcurrentHashMap<InternProxy, [type.typeImmutable.simple]> INTERNER =
      new java.util.concurrent.ConcurrentHashMap<>();

  private static [type.typeImmutable.simple] intern([type.typeImmutable.simple] instance) {
    [type.typeImmutable.simple] canonical = INTERNER.putIfAbsent(new InternProxy(instance), instance);
    return canonical != null ? canonical : instance;
  }
  [else]

  private static final [guava].collect.Interner<InternProxy> INTERNER = [guava].collect.Interners.newStrongInterner();

  private static [type.typeImmutable.simple] intern([type.typeImmutable.simple] instance) {
    return INTERNER.intern(new InternProxy(instance)).instance;
  }
  [/if]
[/if]
[if type.useConstructor]

  /**
   * Construct new immutable {@code [type.name]} instance.
[for v in type.constructorArguments]
   * @param [v.name] value for {@code [v.name]}
[/for]
   * @return immutable [type.name] instance
   */
  public static [type.typeValue.relative] [type.names.of]([for v in type.constructorArguments][if not for.first], [/if][v.atNullability][v.type] [v.name][/for]) {
    return checkPreconditions(new [type.typeImmutable.simple]([for v in type.constructorArguments][if not for.first], [/if][v.name][/for]));
  }
[/if]

  private static [type.typeImmutable.simple] checkPreconditions([type.typeImmutable.simple] instance) {
[if type.validationMethodName]
    instance.[type.validationMethodName]();
[/if]
[if type.useInterned or type.generateOrdinalValue]
    instance = intern(instance);
[/if]
    return instance;
  }
[/template]

[template generateSingletonInstance Type type]
[if type.useSingleton]

  private static final [type.typeImmutable.simple] INSTANCE = checkPreconditions(new [type.typeImmutable.simple]());

  /**
   * Returns default immutable singleton value of {@code [type.name]}
   * @return immutable instance of [type.name]
   */
  [type.typeImmutable.access]static [type.typeValue.relative] [type.names.instance]() {
    return INSTANCE;
  }
[/if]
[/template]

[template generateImmutableCopyOf Type type]
[if type.useCopyConstructor and (not type.constitution.isImplementationHidden)]

/**
 * Creates immutable copy of {@link [type.typeAbstract.relative]}.
 * Uses accessors to get values to initialize immutable instance.
 * If an instance is already immutable, it is returned as is.
 */
[type.typeImmutable.access]static [type.typeValue.relative] [type.names.copyOf](`[type.typeAbstract] instance) {
  if (instance instanceof [type.typeImmutable.relative]) {
    return ([type.typeImmutable.simple]) instance;
  }
[if type.useBuilder]
  [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if](instance);
  return [type.names.builder]()
  [for v in type.settableAttributes]
    [if v.collectionType]
      .[v.names.addAll](instance.[v.names.get]())
    [else if v.mapType]
      .[v.names.putAll](instance.[v.names.get]())
    [else]
      .[v.names.init](instance.[v.names.get]())
    [/if]
  [/for]
      .[type.names.build]();
[else]
  return [type.names.of]([for v in type.constructorArguments][if not for.first], [/if]instance.[v.names.get]()[/for])[if type.useCopyMethods][for
          o in type.constructorOmited if o.generateDefault or o.generateAbstract]
      .[o.names.with](instance.[o.names.get]())[/for][/if];
[/if]
}

/**
 * @deprecated Already an immutable object, no need to create immutable copy
 */
@Deprecated
[type.typeImmutable.access]static [type.typeImmutable.simple] [type.names.copyOf]([type.typeImmutable.simple] instance) {
  return [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if](instance);
}
[/if]
[/template]

[template generateLazyValues Type type]
[for lz = type.lazyAttributes,
  Boolean atGuarded = classpath.available 'javax.annotation.concurrent.GuardedBy']
  [if lz][for LongPositions positions = longsFor lz]
  [for l in positions.longs]
  [if atGuarded]@javax.annotation.concurrent.GuardedBy("this")[/if]
  private volatile long lazyInitBitmap[emptyIfZero l.index];
  [/for]
  [for l in lz, BitPosition pos = positions l]
  [let maskConstantName][toConstant l.name]_LAZY_INIT_BIT[/let]
  [let bitmapFieldName]lazyInitBitmap[emptyIfZero pos.index][/let]

  private static final long [maskConstantName] = [literal.hex pos.mask];

  [if atGuarded]@javax.annotation.concurrent.GuardedBy("this")[/if]
  private [l.type] [l.name];

  /**
   * {@inheritDoc}
   * <p>
   * Returns lazily initialized value of [sourceDocRef type l] attribute.
   * Initialized once and only once and stored for subsequent access with proper synchronization.
   * @return lazily initialized value of {@code l.name}
   */
  @Override
  public [l.type] [l.names.get]() {
    if (([bitmapFieldName] & [maskConstantName]) == 0) {
      synchronized (this) {
        if (([bitmapFieldName] & [maskConstantName]) == 0) {
            [if l.primitive or l.nullable]
          this.[l.name] = [invokeSuper l].[l.names.get]();
            [else]
          this.[l.name] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([invokeSuper l].[l.names.get]());
            [/if]
          [bitmapFieldName] |= [maskConstantName];
        }
      }
    }
    return [l.name];
  }
  [/for]
  [/for][/if]
[/for]
[/template]

[template generateBuilder Type type Boolean topLevel]
[packageWhenTopLevel type topLevel]
[for setters = type.settableAttributes,
     getters = type.implementedAttributes,
     mandatories = type.mandatoryAttributes,
     LongPositions positions = longsFor mandatories,
     primdefs = type.primitiveDefaultAttributes,
     LongPositions defpos = longsFor primdefs]

/**
[if type.kind.isFactory]
 * [type.typeBuilder.simple] collects parameters and invokes static factory method {@code [type.factoryOf](..)}.
 * Call {@link #[type.names.build]()} method to get result of type {@code [type.typeValue]}.
[else]
 * Builds instances of {@link [type.typeValue]}.
 * Initialized attributes and then invoke {@link #[type.names.build]()} method to create
 * immutable instance.
[/if]
 * <p><em>[type.typeBuilder.simple] is not thread safe and generally should not be stored in field or collection,
 * but used immediately to create instances.</em>
 */
[annotationsWhenTopLevel type topLevel]
[if classpath.available 'javax.annotation.concurrent.NotThreadSafe']
@javax.annotation.concurrent.NotThreadSafe
[/if]
[type.typeBuilder.access][if not topLevel]static [/if]final class [type.typeBuilder.simple] [if type.hasAbstractBuilder]
    extends [type.typeAbstract].Builder {[else] {[/if]
  [for l in positions.longs]
  private static final long INITIALIZED_BITSET_ALL_[emptyIfZero l.index] = [literal.hex l.occupation];
  [/for]
  [for p in primdefs, BitPosition pos = defpos p]
  private static final long NONDEFAULT_BIT_[toConstant p.name] = [literal.hex pos.mask];
  [/for]
  [for m in mandatories, BitPosition pos = positions m]
  private static final long INITIALIZED_BIT_[toConstant m.name] = [literal.hex pos.mask];
  [/for]
  [for l in defpos.longs]
  private long nondefaultBitset[emptyIfZero l.index];
  [/for]
  [for l in positions.longs]
  private long initializedBitset[emptyIfZero l.index];
  [/for]

  [for v in setters]
[if v.generateSortedSet]
  private [guava].collect.ImmutableSortedSet.Builder<[v.elementType]> [v.name]Builder =
      [guava].collect.ImmutableSortedSet.[if v.hasNaturalOrder]naturalOrder[else]reverseOrder[/if]();

[else if v.collectionType]
  private [guava].collect.Immutable[v.rawCollectionType].Builder<[v.elementType]> [v.name]Builder =
      [guava].collect.Immutable[v.rawCollectionType].builder();
[else if v.optionalType]
  private [v.type] [v.name] = [guava].base.Optional.absent();
[else if v.generateSortedMap]
  private [guava].collect.ImmutableSortedMap.Builder<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name]Builder =
      [guava].collect.ImmutableSortedMap.[if v.hasNaturalOrder]naturalOrder[else]reverseOrder[/if]();
[else if v.mapType]
  private [guava].collect.ImmutableMap.Builder<[v.wrappedElementType], [v.wrappedSecondaryElementType]> [v.name]Builder =
      [guava].collect.ImmutableMap.builder();
[else if v.primitive]
  private [v.type] [v.name];
[else]
  private [atNullable][v.type] [v.name];
[/if]
  [/for]
[if ((type.names.builder ne 'new') and (not type.kind.isFactory))]
  private [type.typeBuilder.simple]() {}
  [if type.constitution.isOutsideBuilder]

  /**
   * Creates builder for {@link [type.typeValue]}.
   * @return new [type.typeValue.simple] builder
   */
  public static [type.typeBuilder.simple] [type.names.builder]() {
    return new [type.typeBuilder.simple]();
  }
  [/if]
[/if]
  [if type.generateOrdinalValue]
  private Domain domain = Domain.get();

  public [type.typeBuilder.simple] domain(Domain domain) {
    this.domain = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if](domain);
    return this;
  }
  [/if]
  [-- Being called from builder initializer methods --]
  [let nondefaultSetInBuilder Attribute v]
  [if v.primitive and v.generateDefault][for BitPosition pos = defpos v]
    nondefaultBitset[emptyIfZero pos.index] |= NONDEFAULT_BIT_[toConstant v.name];
  [/for][/if]
  [/let]
  [-- Being called from builder initializer methods --]
  [let mandatorySetInBuilder Attribute v]
  [if v.mandatory][for BitPosition pos = positions v]
    initializedBitset[emptyIfZero pos.index] |= INITIALIZED_BIT_[toConstant v.name];
  [/for][/if]
  [/let]
  [for v in setters]
  [if v.collectionType]

  /**
   * Adds one element to [sourceDocRef type v] [toLower v.rawCollectionType].
   * @param element [v.name] element
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.add]([v.unwrappedElementType] element) {
    [v.name]Builder.add(element);
    return this;
  }

  /**
   * Adds elements to [sourceDocRef type v] [toLower v.rawCollectionType].
   * @param elements array of [v.name] elements
   * @return {@code this} builder for chained invocation
   */
  [if v.nonRawElemementType]@SafeVarargs[/if]
  public final [type.typeBuilder.simple] [v.names.add]([v.unwrappedElementType]... elements) {
    return [v.names.addAll]([arrayAsList v 'elements']);
  }

  /**
   * Adds elements to [sourceDocRef type v] [toLower v.rawCollectionType].
   * @param elements iterable of [v.name] elements
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.addAll](Iterable<[v.consumedElementType]> elements) {
    [v.name]Builder.addAll(elements);
    return this;
  }
  [else if v.optionalType]

  /**
   * Initializes present value for optional [sourceDocRef type v].
   * @param [v.name] value for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.init]([v.unwrappedElementType] [v.name]) {
    this.[v.name] = [guava].base.Optional.of([v.name]);
    return this;
  }

  /**
   * Initializes optional value for {@link [type.name]#[v.name]()}.
   * @param [v.name] value for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.init]([guava].base.Optional<[v.wrappedElementType]> [v.name]) {
    this.[v.name] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([v.name]);
    return this;
  }
  [else if v.mapType]
    [for gE = v.consumedElementType, uK = v.unwrappedElementType, wK = v.wrappedElementType, uV = v.unwrappedSecondaryElementType, wV = v.wrappedSecondaryElementType]

  /**
   * Put one entry to [sourceDocRef type v] map.
   * @param key the key in [v.name] map
   * @param value the associated value in [v.name] map
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.put]([uK] key, [uV] value) {
    [v.name]Builder.put(key, value);
    return this;
  }

  /**
   * Put one entry to [sourceDocRef type v] map. Nulls are not permitted
   * @param entry the key and value entry
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.put](java.util.Map.Entry<[gE], ? extends [wV]> entry) {
    [v.name]Builder.put(entry);
    return this;
  }

  /**
   * Put all mappings from specified map as entries to [sourceDocRef type v] map. Nulls are not permitted
   * @param entries to be added to [v.name] map
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.putAll](java.util.Map<[gE], ? extends [wV]> entries) {
    [v.name]Builder.putAll(entries);
    return this;
  }

    [/for]
  [else if v.arrayType]

  /**
   * Initializes value for [sourceDocRef type v].
  [if v.generateDefault]
   * <p><em>If not set, this attribute will have default value as defined by [sourceDocRef type v].</em>
  [/if]
   * @param elements elements for [v.name], non-null
   * @return {@code this} builder for chained invocation
   */
  [if v.nonRawElemementType]@SafeVarargs[/if]
  public final [type.typeBuilder.simple] [v.names.init]([v.elementType]... elements) {
    this.[v.name] = elements.clone();
    [mandatorySetInBuilder v]
    return this;
  }
  [else]

  /**
   * Initializes value for [sourceDocRef type v].
  [if v.generateDefault]
   * <p><em>If not set, this attribute will have {@link [type.name]#[v.names.get]() default value}.</em>
  [/if]
   * @param [v.name] value for [v.name][if not v.nullable], non-null[/if]
   * @return {@code this} builder for chained invocation
   */
  public final [type.typeBuilder.simple] [v.names.init]([v.atNullability][v.type] [v.name]) {
    [if v.primitive or v.nullable]
    this.[v.name] = [v.name];
    [else]
    this.[v.name] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([v.name]);
    [/if]
    [nondefaultSetInBuilder v]
    [mandatorySetInBuilder v]
    return this;
  }
  [/if]
  [/for]

  /**
   * Builds new {@link [type.name]}.
   * @return immutable instance of [type.name]
   */
  public [type.typeValue] [type.names.build]() {
  [if positions.longs]
    checkRequiredAttributes();
  [/if]
  [if type.kind.isFactory]
    [returnFactoryBuild type]
  [else]
    return [type.typeImmutable.relative].checkPreconditions(
        new [type.typeImmutable.relative](this));
  [/if]
  }
  [for p in primdefs, BitPosition pos = defpos p]

  private boolean [p.name]IsSet() {
    return (nondefaultBitset[emptyIfZero pos.index] & NONDEFAULT_BIT_[toConstant p.name]) != 0;
  }
  [/for]
  [for m in mandatories, BitPosition pos = positions m]

  private boolean [m.name]IsSet() {
    return (initializedBitset[emptyIfZero pos.index] & INITIALIZED_BIT_[toConstant m.name]) != 0;
  }
  [/for]
  [if positions.longs]

  private void checkRequiredAttributes() {
    if ([for l in positions.longs][if not for.first]
        | [/if]initializedBitset[emptyIfZero l.index] != INITIALIZED_BITSET_ALL_[emptyIfZero l.index][/for]) {
      throw new IllegalStateException(formatRequiredAttributesMessage());
    }
  }
    [if type.generateJdkOnly]
  private String formatRequiredAttributesMessage() {
    return new StringBuilder("Cannot build [type.name], some of required attributes are not set {")
      [for m in mandatories]
        .append(![m.name]IsSet() ? ", [m.name]" : "")
      [/for]
        .append('}').toString().replaceFirst("{, ", "{");
  }
    [else]
  private String formatRequiredAttributesMessage() {
    return [type.typeMoreObjects].toStringHelper("Cannot build [type.name], some of required attributes are not set ")
        .omitNullValues()
      [for m in mandatories]
        .addValue(![m.name]IsSet() ? "[m.name]" : null)
      [/for]
        .toString();
  }
    [/if]
  [/if]

  /**
   * Prints currently set attributes.
   * @return string representation of builder
   */
  [if type.generateJdkOnly]
  @Override
  public String toString() {
    return new StringBuilder("[type.typeBuilder.relative]{")
  [for v in setters]
    [if v.collectionType or v.mapType]
        .append(", [v.name]=").append([v.name]Builder)
    [else if v.optionalType]
        .append(", [v.name]=").append(([v.name].isPresent() ? [v.name].get() : "<?>")
    [else if v.arrayType]
        .append(", [v.name]=").append(java.util.Arrays.toString([v.name]))
    [else if v.primitive]
        .append(", [v.name]" ).append([v.name]IsSet() ? [v.name] : "<?>")
    [else]
        .append(", [v.name]").append([v.name])
    [/if]
  [/for]
        .append('}').toString().replaceFirst("{, ", "{");
  }
  [else]
  @Override
  public String toString() {
    return [type.typeMoreObjects].toStringHelper("[type.typeBuilder.relative]")
  [for v in setters]
    [if v.collectionType or v.mapType]
        .add("[v.name]", [v.name]Builder.build())
    [else if v.optionalType]
        .add("[v.name]", [v.name].isPresent() ? [v.name].get() : "<?>")
    [else if v.arrayType]
        .add("[v.name]", java.util.Arrays.toString([v.name]))
    [else if v.primitive]
        .add("[v.name]", [v.name]IsSet() ? [v.name] : "<?>")
    [else]
        .add("[v.name]", [v.name])
    [/if]
  [/for]
        .toString();
  }
  [/if]
[if type.constitution.hasImmutableInBuilder]
  [generateImmutable type false]
[/if]
}
[/for]
[/template]

[template returnFactoryBuild Type type]
return [type.factoryOf]([for v in type.settableAttributes][if not for.first],[/if]
    [output.trim]
  [if v.generateOrdinalValueSet or (v.generateEnumSet or v.generateEnumMap)]
    [immutableCollectionCopyOf v][v.name]Builder.build()[/immutableCollectionCopyOf]
  [else if v.collectionType or v.mapType]
    [v.name]Builder.build()
  [else if v.primitive or v.nullable]
    [v.name]
  [else]
    [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([v.name])
  [/if]
[/output.trim][/for]);
[/template]

[template generateConstructorDefaultAttributes Type type Attribute... attributes]
[for v in attributes if not (v.generateDefault or v.generateDerived), n = v.name]
  [if v.optionalType]
this.[n] = [guava].base.Optional.absent();
  [else if v.mapType]
this.[n] = [guava].collect.ImmutableMap.of();
  [else if v.collectionType]
this.[n] = [guava].collect.Immutable[v.rawCollectionType].of();
  [else if v.nullable]
this.[n] = null;
  [else]
    [output.error]
      Could not generate constructor. Attribute '[v.name]' [v.generateDefault] does not have default value.
    [/output.error]
  [/if]
[/for]
[for v in attributes if v.generateDefault or v.generateDerived, n = v.name]
[if type.annotationType]
this.[n] = DEFAULT_VALUE_[toConstant v.name];
[else]
  [if v.primitive or v.nullable]
this.[n] = [invokeSuper v].[v.names.get]();
  [else]
this.[n] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([invokeSuper v].[v.names.get]());
  [/if]
[/if]
[/for]
[/template]

[template generateImmutableMembers Type type]
[for setters = type.settableAttributes, getters = type.implementedAttributes]
[for v in getters]
  private final [v.atNullability][immutableImplementationType v] [v.name];
[/for]
[if type.usePrehashed]
  private final int hashCode;
[/if]
[if type.generateOrdinalValue]
  private final int ordinal;
  private final Domain domain;
[/if]
[if type.useSingleton]

  private [type.typeImmutable.simple]() {
    [generateConstructorDefaultAttributes type type.implementedAttributes]
    [generateAfterConstruction type false]
  }
[/if]
[if type.useConstructor]

  private [type.typeImmutable.simple]([for v in type.constructorArguments][if not for.first],[/if]
      [v.atNullability][v.type] [v.name][/for]) {
[for v in type.constructorArguments, n = v.name]
  [if v.collectionType or v.mapType]
    this.[n] = [immutableCollectionCopyOf v n];
  [else if v.primitive or v.nullable]
    this.[n] = [n];
  [else]
    this.[n] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([n]);
  [/if]
[/for]
    [generateConstructorDefaultAttributes type type.constructorOmited]
    [generateAfterConstruction type false]
  }
[/if]
[if type.useBuilder]

  private [type.typeImmutable.simple]([type.typeBuilder.relative] builder) {
[for v in getters if not v.generateDerived, n = v.name]
  [if v.generateOrdinalValueSet or (v.generateEnumSet or v.generateEnumMap)]
    this.[n] = [immutableCollectionCopyOf v]builder.[n]Builder.build()[/immutableCollectionCopyOf];
  [else if v.collectionType or v.mapType]
    this.[n] = builder.[n]Builder.build();
  [else if not v.generateDefault]
    this.[n] = builder.[n];
  [/if]
[/for]
[-- Generate default values comes after required values]
[for v in getters, n = v.name]
[if v.generateDefault]
  [if v.primitive]
    this.[n] = builder.[n]IsSet()
        ? builder.[n]
      [if type.annotationType]
        : DEFAULT_VALUE_[toConstant v.name];
      [else]
        : [invokeSuper v].[v.names.get]();
      [/if]
  [else]
    this.[n] = builder.[n] != null
        ? builder.[n]
      [if type.annotationType]
        : DEFAULT_VALUE_[toConstant v.name];
      [else if v.nullable]
        : [invokeSuper v].[v.names.get]();
      [else]
        : [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([invokeSuper v].[v.names.get]());
      [/if]
  [/if]
[else if v.generateDerived]
  [if v.primitive or v.nullable]
    this.[n] = [invokeSuper v].[v.names.get]();
  [else]
    this.[n] = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if]([invokeSuper v].[v.names.get]());
  [/if]
[/if]
[/for]
    [generateAfterConstruction type true]
  }
[/if]
[if type.useCopyMethods]

  private [type.typeImmutable.simple](
      [type.typeImmutable.simple] original[for v in getters],
      [v.atNullability][immutableImplementationType v] [v.name][/for]) {
  [for v in getters]
    this.[v.name] = [v.name];
  [/for]
    [generateAfterConstruction type false]
  }
  [generateCopyMethods type]
[/if]
  [generateAccessorMethods type]
  [generateObjectUtilityMethods type]
  [generateJacksonMapped type]
[/for]
[/template]

[template generateJacksonMapped Type type]
[if type.generateJacksonMapped]
[if not type.useBuilder]
  [output.error]Cannot use @Jackson.Mapped without builder enabled[/output.error]
[/if]
[if not type.generateMarshaled]
  [output.error]Cannot use @Jackson.Mapped without @Json.Marshaled annotation[/output.error]
[/if]
[let marshalerInstance][type.name]Marshaler.instance()[/let]

@com.fasterxml.jackson.annotation.JsonValue
public com.fasterxml.jackson.databind.util.TokenBuffer toTokenBuffer() throws java.io.IOException {
  return org.immutables.common.marshal.internal.MarshalingSupport.toTokenBuffer([marshalerInstance], this);
}

@com.fasterxml.jackson.annotation.JsonCreator
public static [type.typeValue.relative] fromTokenBuffer(com.fasterxml.jackson.databind.util.TokenBuffer buffer) throws java.io.IOException {
  return [type.names.copyOf](org.immutables.common.marshal.internal.MarshalingSupport.fromTokenBuffer([marshalerInstance], buffer));
}
[/if]
[/template]

[template generateAccessorMethods Type type]
[if type.annotationType]

/**
 * {@inheritDoc}
 * @return value of {@code [type.typeAbstract].class} literal
 */
@Override
public Class<? extends java.lang.annotation.Annotation> annotationType() {
  return [type.typeAbstract].class;
}
[/if]
  [for v in type.implementedAttributes]

/**
 * {@inheritDoc}
[if v.arrayType]
 * @return cloned {@code [v.name]} array
[else if v.generateDerived]
 * @return computed at construction value of {@code [v.name]} attribute
[else]
 * @return value of {@code [v.name]} attribute
[/if]
 */
[for line in v.annotations]
[line]
[/for]
@Override
public [immutableImplementationType v] [v.names.get]() {
[if v.arrayType]
  return [v.name].clone();
[else]
  return [v.name];
[/if]
}
  [/for]
[generateGetters type]
  [if type.generateOrdinalValue]

@Override
public int ordinal() {
  return ordinal;
}
  [/if]
[/template]

[template generateObjectUtilityMethods Type type]
[let equalToType][if type.annotationType][type.typeAbstract.relative][else][type.typeImmutable.simple][/if][/let]
[for getters = type.equivalenceAttributes]
[if not type.equalToDefined]

/**
[if type.annotationType]
 * This instance is equal to any implementation of {@link [type.typeAbstract.relative]} with equal attribute values.
[else]
 * This instance is equal to instances of {@code [type.typeImmutable.simple]} with equal attribute values.
[/if]
[if type.useReferenceEquality]
 * As instances of {@code [type.typeImmutable.simple]} class are interned, {@code equals} method is implemented
 * as efficient reference equality check.
[/if]
 * @return {@code true} if {@code this} is equal to {@code another} instance
 */
@Override
public boolean equals([atNullable]Object another) {
  [if type.useReferenceEquality]
  return this == another;
  [else]
  return this == another
      || (another instanceof [equalToType] && equalTo(([equalToType]) another));
  [/if]
}
[/if]

private boolean equalTo([equalToType] another) {
  return [if not getters]true[/if][for v in getters][if not for.first]
      && [/if][equalsAttribute v type.annotationType][/for];
}
[if type.annotationType]

private int computeHashCode() {
  int h = 0;
[for v in getters]
[if v.arrayType]
  h += 127 * "[v.name]".hashCode() ^ java.util.Arrays.hashCode([v.name]);
[else if v.primitive]
  h += 127 * "[v.name]".hashCode() ^ [primitiveHashCode v];
[else]
  h += 127 * "[v.name]".hashCode() ^ [v.name].hashCode();
[/if]
[/for]
  return h;
}
[else if getters.isEmpty]

private int computeHashCode() {
  return [type.hashCode];
}
[else]

private int computeHashCode() {
  int h = 31;
[for v in getters]
[if v.nullable]
  h = h * 17 + [if type.generateJdkOnly]java.util.Objects.hashCode[else][guava].base.Objects.hashCode[/if]([v.name]);
[else if v.arrayType]
  h = h * 17 + java.util.Arrays.hashCode([v.name]);
[else if v.primitive]
  h = h * 17 + [primitiveHashCode v];
[else]
  h = h * 17 + [v.name].hashCode();
[/if]
[/for]
  return h;
}
[/if]
[if not type.hashCodeDefined]

/**
[if type.usePrehashed]
 * Returns precomputed on construction hash code from attributes: [for a in getters][if not for.first], [/if]{@code [a.name]}[/for].
[else]
 * Computes hash code from attributes: [for a in getters][if not for.first], [/if]{@code [a.name]}[/for].
[/if]
 * @return hashCode value
 */
@Override
public int hashCode() {
  [if type.usePrehashed]
  return hashCode;
  [else]
  return computeHashCode();
  [/if]
}
[/if]
[/for]
[generateToString type]
[/template]

[template generateToString Type type]
[if not type.toStringDefined]

/**
 * Prints immutable value {@code [type.name]{...}} with attribute values,
 * excluding any non-generated and auxiliary attributes.
 * @return string representation of value
 */
  [if type.generateJdkOnly]
@Override
public String toString() {
  return new StringBuilder("[if type.annotationType]@[/if][type.name]{")
  [for v in type.equivalenceAttributes]
  [if v.arrayType]
      .append(", [v.name]=").append(java.util.Arrays.toString([v.name]))
  [else]
      .append(", [v.name]=").append([v.name])
  [/if]
  [/for]
      .append('}').toString().replaceFirst("{, ", "{");
}
  [else]
@Override
public String toString() {
  return [type.typeMoreObjects].toStringHelper("[if type.annotationType]@[/if][type.name]")
  [for v in type.equivalenceAttributes]
  [if v.arrayType]
      .add("[v.name]", java.util.Arrays.toString([v.name]))
  [else]
      .add("[v.name]", [v.name])
  [/if]
  [/for]
      .toString();
}
  [/if]
[/if]
[/template]

[template generateAfterConstruction Type type Boolean usingBuilder]
  [if type.usePrehashed]
this.hashCode = this.computeHashCode();
  [/if]
  [if type.generateOrdinalValue][-- Assigning dummy ordinal value to be changed on interning --]
this.ordinal = 0;
    [if usingBuilder]
this.domain = builder.domain;
    [else]
[-- Default static ordinal domain --]
this.domain = Domain.get();
    [/if]
  [/if]
[/template]

[template generateReturnCopyContextual Type type Attribute modified]
return checkPreconditions(new [type.typeImmutable.simple](
    this[for a in type.implementedAttributes],
    [if a.name eq modified.name]newValue[else]this.[a.name][/if][/for]));
[/template]

[template generateCopyMethods Type type]
  [for v in type.settableAttributes]
    [if v.arrayType]

/**
 * Copy current immutable object with elements that replace content of [sourceDocRef type v].
 * Array is cloned before saved as the attribute value.
 * @param elements elements for [v.name], not null
 * @return modified copy of {@code this} object
 */
[if v.nonRawElemementType]@SafeVarargs[/if]
public final [type.typeImmutable.simple] [v.names.with]([v.elementType]... elements) {
  [immutableImplementationType v] newValue = elements.clone();
  [generateReturnCopyContextual type v]
}
    [else if v.collectionType]

/**
 * Copy current immutable object with elements that replace content of [sourceDocRef type v].
 * @param elements elements to set
 * @return modified copy of {@code this} object
 */
[if v.nonRawElemementType]@SafeVarargs[/if]
public final [type.typeImmutable.simple] [v.names.with]([v.unwrappedElementType]... elements) {
  [immutableImplementationType v] newValue = [immutableCollectionCopyOf v][arrayAsList v 'elements'][/immutableCollectionCopyOf];
  [generateReturnCopyContextual type v]
}

/**
 * Copy current immutable object with elements that replace content of [sourceDocRef type v].
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param elements iterable of [v.name] elements to set
 * @return modified copy of {@code this} object
 */
public final [type.typeImmutable.simple] [v.names.with](Iterable<[v.consumedElementType]> elements) {
  if (this.[v.name] == elements) {
    return this;
  }
  [immutableImplementationType v] newValue = [immutableCollectionCopyOf v 'elements'];
  [generateReturnCopyContextual type v]
}
    [else if v.optionalType]

/**
 * Copy current immutable object by setting present value for optional [sourceDocRef type v].
 * @param value value for [v.name], non-null
 * @return modified copy of {@code this} object
 */
public final [type.typeImmutable.simple] [v.names.with]([v.unwrappedElementType] value) {
  [immutableImplementationType v] newValue = [guava].base.Optional.of(value);
  [generateReturnCopyContextual type v]
}

/**
 * Copy current immutable object by setting optional value for [sourceDocRef type v].
 * Shallow reference equality check on optional value is used to prevent copying of the same value by returning {@code this}.
 * @param optional value for [v.name], non-null
 * @return modified copy of {@code this} object
 */
public final [type.typeImmutable.simple] [v.names.with]([guava].base.Optional<[v.wrappedElementType]> optional) {
  if (this.[v.name] == optional) {
    return this;
  }
  [immutableImplementationType v] newValue = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if](optional);
  [generateReturnCopyContextual type v]
}
    [else if v.mapType]
    [for gE = v.consumedElementType, uK = v.unwrappedElementType, wK = v.wrappedElementType, uV = v.unwrappedSecondaryElementType, wV = v.wrappedSecondaryElementType]

/**
 * Copy current immutable object by replacing [sourceDocRef type v] map with specified map.
 * Nulls are not permitted as keys or values.
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param entries to be added to [v.name] map
 * @return modified copy of {@code this} object
 */
public final [type.typeImmutable.simple] [v.names.with](java.util.Map<[gE], ? extends [wV]> entries) {
  if (this.[v.name] == entries) {
    return this;
  }
  [immutableImplementationType v] newValue = [immutableCollectionCopyOf v 'entries'];
  [generateReturnCopyContextual type v]
}
    [/for]
    [else]

/**
 * Copy current immutable object by setting value for [sourceDocRef type v].
 [if v.primitive and (not v.floatType)]
 * Value equality check is used to prevent copying of the same value by returning {@code this}.
 [else if not v.primitive]
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 [/if]
 * @param value new value for [v.name][if not v.nullable], non-null[/if]
 * @return modified copy of the {@code this} object
 */
public final [type.typeImmutable.simple] [v.names.with]([v.atNullability][v.type] value) {
    [if not v.floatType]
  if (this.[v.name] == value) {
    return this;
  }
    [/if]
    [if v.nullable or v.primitive]
  [v.atNullability][immutableImplementationType v] newValue = value;
    [else]
  [immutableImplementationType v] newValue = [if type.generateJdkOnly]java.util.Objects.requireNonNull[else][guava].base.Preconditions.checkNotNull[/if](value);
    [/if]
  [generateReturnCopyContextual type v]
}
    [/if]
  [/for]
[/template]

[template generateGetters Type type]
  [if type.generateGetters]
    [for v in type.allAccessibleAttributes]

/**
 * Gets the value of [sourceDocRef type v] attribute.
[if v.optionalType]
 * @return value of [v.name] if present, {@code null} if absent
[else]
 * @return value for [v.name], non-null
[/if]
 */
  [for line in v.annotations]
[line]
  [/for]
  [if v.optionalType]
public [atNullable][v.wrappedElementType] get[toUpper v.name]() {
  return [v.name]().orNull();
}
  [else]
public [immutableImplementationType v] [if v.boolean]is[else]get[/if][toUpper v.name]() {
  return [v.name]();
}
  [/if]
    [/for]
  [/if]
[/template]

[template defaultAnnotationValues Type type]
[for defaults = type.defaultAttributes]
[if defaults]
[for a in defaults]
private static final [a.type] DEFAULT_VALUE_[toConstant a.name];
[/for]

static {
  try {
  [for a in defaults]
    DEFAULT_VALUE_[toConstant a.name] =
        cast([type.typeAbstract.relative].class.getDeclaredMethod("[a.name]").getDefaultValue());
  [/for]
  } catch(Exception e) {
    throw new ExceptionInInitializerError(e);
  }
}

@SuppressWarnings("unchecked")
private static <T> T cast(Object object) {
  return (T) object;
}
[/if]
[/for]
[/template]

[template forwardingEnclosingFactoryMethods Type type]
  [if type.constitution.isImplementationHidden]
    [if type.useSingleton]

/**
 * Returns default immutable singleton value of [type.name]
 * @return immutable instance of [type.name]
 */
public static [type.typeValue.relative] [type.factoryInstance.simple]() {
  return [type.typeImmutable.relative].[type.names.instance]();
}
    [/if]
    [if type.useConstructor]

/**
 * Construct new immutable {@code [type.name]} instance.
[for v in type.constructorArguments]
 * @param [v.name] value for {@code [v.name]}
[/for]
 * @return immutable [type.name] instance
 */
public static [type.typeValue.relative] [type.factoryOf.simple]([for v in type.constructorArguments][if not for.first], [/if][v.atNullability][v.type] [v.name][/for]) {
  return [type.typeImmutable.relative].[type.names.of]([for v in type.constructorArguments][if not for.first], [/if][v.name][/for]);
}
    [/if]
  [/if]
[/template]

[template immutableImplementationType Attribute v][output.trim]
[if v.generateJdkOnly][-- for now jdk only will be the same --]
  [v.type]
[else if v.generateOrdinalValueSet]
  org.immutables.common.collect.ImmutableOrdinalSet<[v.elementType]>
[else if v.generateSortedSet]
  [guava].collect.ImmutableSortedSet<[v.elementType]>
[else if v.collectionType]
  [guava].collect.Immutable[v.rawCollectionType]<[v.elementType]>
[else if v.generateSortedMap]
  [guava].collect.ImmutableSortedMap<[v.elementType], [v.secondaryElementType]>
[else if v.mapType]
  [guava].collect.ImmutableMap<[v.elementType], [v.secondaryElementType]>
[else]
  [v.type]
[/if]
[/output.trim][/template]

[template immutableCollectionCopyOf Attribute a String expression][output.trim]
[if a.generateJdkOnly]
  [output.error]Not implemented!!![/output.error]
[else]
  [if a.generateSortedSet]
    [guava].collect.ImmutableSortedSet.copyOf(
      [if a.hasNaturalOrder]
        [guava].collect.Ordering.<[a.elementType]>natural(),
      [else]
        [guava].collect.Ordering.<[a.elementType]>natural().reverse(),
      [/if]
        [expression])
  [else if a.generateEnumSet]
    [guava].collect.Sets.immutableEnumSet([expression])
  [else if a.generateOrdinalValueSet]
    org.immutables.common.collect.ImmutableOrdinalSet.copyOf([expression])
  [else if a.collectionType]
    [guava].collect.Immutable[a.rawCollectionType].copyOf([expression])
  [else if a.generateSortedMap]
    [guava].collect.ImmutableSortedMap.copyOf([expression],
    [if a.hasNaturalOrder]
        [guava].collect.Ordering.<[a.elementType]>natural()
    [else]
        [guava].collect.Ordering.<[a.elementType]>natural().reverse()
    [/if])
  [else if a.generateEnumMap]
    [guava].collect.Maps.immutableEnumMap([expression])
  [else if a.mapType]
    [guava].collect.ImmutableMap.copyOf([expression])
  [else]
    [expression]
  [/if]
[/if]
[/output.trim][/template]

[template equalsAttribute Attribute a Boolean useAccessor][output.trim]
[let getOther]another.[if useAccessor][a.names.get]()[else][a.name][/if][/let]
[if a.float]
  Float.floatToIntBits([a.name]) == Float.floatToIntBits([getOther])
[else if a.double]
  Double.doubleToLongBits([a.name]) == Double.doubleToLongBits([getOther])
[else if a.primitive]
  [a.name] == [getOther]
[else if a.arrayType]
  java.util.Arrays.equals([a.name], [getOther])
[else if a.nullable]
  [if a.generateJdkOnly]
    java.util.Objects.equals([a.name], [getOther])
  [else]
    [guava].base.Objects.equal([a.name], [getOther])
  [/if]
[else]
  [a.name].equals([getOther])
[/if]
[/output.trim][/template]

[template arrayAsList Attribute a String expression][output.trim]
[if a.unwrappedElementPrimitiveType]
  [if a.generateJdkOnly]
    [output.error]Template methods 'arrayAsList' could not be used for primitive jdk only conversion[/output.error]
  [else]
    [guava].primitives.[toUpper a.unwrappedElementType]s.asList([expression])
  [/if]
[else]
  java.util.Arrays.asList([expression])
[/if]
[/output.trim][/template]

[template primitiveHashCode Attribute v][output.trim]
[if v.int]
  [v.name]
[else if v.generateJdkOnly]
  [if classpath.available 'java.lang.FunctionalInterface']
    [v.wrapperType].hashCode([v.name])
  [else if v.long]
    (int) ([v.name] ^ ([v.name] >>> 32))
  [else if v.boolean]
    ([v.name] ? 1231 : 1237)
  [else if v.float]
    Float.floatToIntBits([v.name])
  [else if v.double][-- Microbenchmark showed that it's ok to new Double, probably due escape analysis --]
    new Double([v.name]).hashCode()
  [else]
    (int) [v.name]
  [/if]
[else]
  [guava].primitives.[toUpper v.type]s.hashCode([v.name])
[/if]
[/output.trim][/template]

[template invokeSuper Attribute a][for di = a.defaultInterface][if di][di].[/if][/for]super[/template]

[template sourceDocRef Type t Attribute a][if t.kind.isValue]{@link [t.name]#[a.names.get]() [a.names.raw]}[else]{@code [a.names.raw]}[/if][/template]

[template immutableCollectionFromBuilder Attribute v]

[/template]

[template immutableCollectionFromExternal Attribute v]

[/template]

[template guava]co['m.google.com']mon[/template][-- this is to hide from jar shading/class relocation in string constants --]
