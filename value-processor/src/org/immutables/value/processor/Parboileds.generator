[template generate]
  [for type in values.values if type.generateParboiled]
    [if type.kind.isEnclosing and (not type.kind.isValue)]
[output.java type.package (type.typeAbstract.simple 'Parboiled')]
[generateParboiled type]
[/output.java]
    [else]
[output.error]
Use @Parboil.Ast to annotate umbrella class with @Value.Nested, but not @Value.Immutable
[/output.error]
    [/if]
  [/for]
[/template]

[template generateParboiled Type type]
[if type.package]
package [type.package];
[/if]

import org.immutables.generator.processor.Extractions;
// Generated imports

@SuppressWarnings("all")
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"Parboileds.generator", "[type.name]"})
[type.typeAbstract.access]final class Parboiled[type.typeAbstract.simple] {
  private Parboiled[type.typeAbstract.simple]() {}
[for v in type.nested]
  [generateParboiledType v]
[/for]
}
[/template]

[template generateParboiledType Type type]

@javax.annotation.Generated({"Parboileds.generator", "[type.name]"})
public static class [type.typeAbstract.simple] {
  private [type.typeAbstract.simple]() {}
[if type.useSingleton]

  public static Extractions.Extractor<[type.name]> of() {
    return new Extractions.Instance<[type.name]>() {
      @Override
      public [type.name] get() {
        return [type.factoryInstance]();
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].of()";
      }
    };
  }
[/if]
[if type.hasSingleParameterConstructor]
  [for c in type.constructorArguments]
  [if c.stringType]

  public static Extractions.Extractor<[type.name]> of() {
    return of(Extractions.matched());
  }
  [else]

  public static Extractions.Extractor<[type.name]> of() {
    return of(Extractions.<[c.wrapperType]>popped());
  }
  [/if]

  public static Extractions.Extractor<[type.name]> of(Extractions.Extractor<[c.wrapperType]> [c.name]) {
    return new Extractions.Construct<[type.name], [c.wrapperType]>([c.name]) {
      @Override
      public [type.name] get([c.wrapperType] value) {
        return [type.factoryOf](value);
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].of()";
      }
    };
  }
  [/for]
[/if]
[if type.useBuilder]

  public static Extractions.Applicator builder() {
    return new Extractions.Builder<[type.typeBuilder]>() {
      @Override
      public [type.typeBuilder].Builder builder() {
        return [type.factoryBuilder]();
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].builder()";
      }
    };
  }

  public static Extractions.Extractor<[type.typeAbstract]> build() {
    return new Extractions.Build<[type.typeBuilder], [type.name]>() {
      @Override
      public [type.name] build([type.typeBuilder] builder) {
        return builder.[type.names.build]();
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].build()";
      }
    };
  }
  [for a in type.implementedAttributes]
  [if a.collectionType]

  public static Extractions.Applicator add[toUpper a.name]() {
    return add[toUpper a.name](Extractions.<[a.wrappedElementType]>popped());
  }

  public static Extractions.Applicator add[toUpper a.name](Extractions.Extractor<? extends [a.wrappedElementType]> [a.name]Element) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrappedElementType]>([a.name]Element) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrappedElementType] value) {
        builder.[a.names.add](value);
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].add[toUpper a.name]()";
      }
    };
  }
  [else if a.mapType]
  [else if a.optionalType]

  public static Extractions.Applicator [a.name]() {
    return [a.name](Extractions.<[a.wrappedElementType]>popped());
  }

  public static Extractions.Applicator [a.name](Extractions.Extractor<? extends [a.wrappedElementType]> [a.name]) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrappedElementType]>([a.name]) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrappedElementType] value) {
        builder.[a.names.init](value);
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].[a.name]()";
      }
    };
  }
  [else]
    [if a.simpleLiteralType]

  public static Extractions.Applicator [a.name]([a.type] value) {
    return [a.name](Extractions.<[a.wrapperType]>value(value));
  }
    [/if]

  public static Extractions.Applicator [a.name]() {
    return [a.name](Extractions.<[a.wrapperType]>popped());
  }

  public static Extractions.Applicator [a.name](Extractions.Extractor<[a.wrapperType]> [a.name]) {
    return new Extractions.Specify<[type.typeBuilder], [a.wrapperType]>([a.name]) {
      @Override
      public void specify([type.typeBuilder] builder, [a.wrapperType] value) {
        builder.[a.names.init](value);
      }
      @Override
      public String toString() {
        return "[type.typeAbstract.simple].[a.name]()";
      }
    };
  }
  [/if]
  [/for]
[/if]
}
[/template]
