[template generate]
  [for type in values.values if type.generateTransformer]
    [if type.kind.isEnclosing and (not type.kind.isValue)]
[for String transformersClassname = (type.name 'Transformer')]
[output.java type.package transformersClassname]
[generateTransformer type transformersClassname]
[/output.java]
[/for]
    [else]
[output.error]
Use @Trees.Transform to annotate umbrella class with @Value.Enclosing, but with @Value.Immutable
[/output.error]
    [/if]
  [/for]
[/template]

[template generateTransformer Type transformerType String transformersClassname]
[if transformerType.package]
package [transformerType.package];
[/if]

@SuppressWarnings("all")
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"Transformers.generator", "[transformerType.name]"})
[transformerType.typeValue.access]abstract class [transformersClassname]<C> {
  protected [transformersClassname]() {}
  [for cases = transformerType.cases,
       type in cases.implementedTypes,
       t = type.typeValue,
       s = type.name,
       Boolean useCopy = type.useCopyConstructor and type.useCopyMethods]
  [if useCopy]

  public [t] to[s](C context, [t] value) {
    return [type.factoryCopyOf](value)[for a in type.settableAttributes]
        .[a.names.with](to[s][transformAttributeSuffix a](context, value, value.[a.names.get]()))[/for];
  }
  [else]

  public [t] to[s](C context, [t] value) {
    return value;
  }
  [/if]
  [for a in type.settableAttributes if useCopy]
    [if a.nullable]

  protected [a.rawType]<[a.wrappedElementType]> to[s][transformAttributeSuffix a](C context, [t] value, [a.atNullability][a.type] nullable) {
    if (nullable != null) {
      return to[s][toUpper a.name](context, value, nullable);
    }
    return null;
  }
    [else if a.optionalType]

  protected [a.rawType]<[a.wrappedElementType]> to[s][transformAttributeSuffix a](C context, [t] value, [a.type] optional) {
    if (optional.isPresent()) {
      return [a.rawType].of(to[s][toUpper a.name](context, value, optional.[optionalGet a]));
    }
    return [a.rawType].[optionalEmpty a];
  }
    [else if a.collectionType]

  protected Iterable<[a.wrappedElementType]> to[s][transformAttributeSuffix a](C context, [t] value, [a.type] collection) {
    java.util.List<[a.wrappedElementType]> list = new java.util.ArrayList<>();
    for ([a.wrappedElementType] element : collection) {
      list.add(to[s][toUpper a.name](context, value, element));
    }
    return list;
  }
    [/if]
  [for et = a.wrappedElementType]

  protected [et] to[s][toUpper a.name](C context, [t] value, [et] element) {
    [if cases.isImplementedType et]
    return to[s](context, element);
    [else][for Type subtype in cases.knownSubtypes et]
    if (element instanceof [subtype.typeValue]) {
      return as[simplifyName et](context, ([subtype.typeValue]) element);
    }
    [/for]
    return element;
    [/if]
  }
  [/for]
  [/for]
  [/for]
  [for cases = transformerType.cases,
       e in cases.subtypeUsages.entries,
       k = e.key,
       v = e.value,
       t = v.typeValue]

  protected [k] as[simplifyName e.key](C context, [t] value) {
  [if cases.isImplementedType t]
    return to[v.name](context, value);
  [else]
    return value;
  [/if]
  }
  [/for]
}
[/template]

[template transformAttributeSuffix Attribute a][output.trim]
  [if a.nullable]
    Nullable[toUpper a.name]
  [else if a.optionalType]
    Optional[toUpper a.name]
  [else if a.collectionType]
    [a.rawCollectionType][toUpper a.name]
  [else]
    [toUpper a.name]
  [/if]
[/output.trim][/template]

[template optionalGet Attribute a][if a.jdkSpecializedOptional]getAs[toUpper a.elementType][else]get[/if]()[/template]

[template optionalEmpty Attribute a][if a.jdkOptional]empty[else]absent[/if]()[/template]
