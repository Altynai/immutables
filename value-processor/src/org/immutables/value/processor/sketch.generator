[if type.useBuilder and (not type.constitution.isOutsideBuilder)]
  [if type.names.builder ne 'new']

  /**
   * Creates builder for {@link [type.typeValue]}.
   * @return new [type.typeValue.simple] builder
   */
  public static [type.typeBuilder.relative] [type.names.builder]() {
    return new [type.typeBuilder.relative]();
  }
  [/if]
  [generateBuilder type false]
[/if]

[if type.useSingleton]

  private static final [type.typeImmutable.simple] INSTANCE = checkPreconditions(new [type.typeImmutable.simple]());

  /**
   * Returns default immutable singleton value of [type.typeAbstract.simple]
   * @return immutable instance of [type.name]
   */
  public static [type.typeValue.relative] [type.names.instance]() {
    return INSTANCE;
  }
[/if]
[if type.useConstructor]

  /**
   * Constructs new immutable instance of [type.typeAbstract.simple].
[for v in type.constructorArguments]
   * @param [v.name] value for {@code [v.name]}
[/for]
   * @return immutable [type.typeAbstract.simple] instance
   */
  public static [type.typeImmutable.simple] [type.names.of]([for v in type.constructorArguments][if not for.first], [/if][v.atNullability][v.type] [v.name][/for]) {
    return checkPreconditions(new [type.typeImmutable.simple]([for v in type.constructorArguments][if not for.first], [/if][v.name][/for]));
  }
[/if]
