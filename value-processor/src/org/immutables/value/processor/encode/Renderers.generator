[template public declareFields Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
private final [inst.typer impl.type] [inst.namer impl.name];
[for el in enc.element if el.valueField]
[if el.private]private [else]public [/if][if el.final]final [/if][inst.typer el.type] [inst.namer el.name];
[/for]
[/for]
[/template]

[template public defaultValue Attribute a]
[for inst = a.instantiation,
      enc = inst.encoding,
			impl = enc.impl]
  [if impl.code]
[inst.codeOf impl]
  [else]
null
[output.error]
Could not generate constructor. Attribute '[a.name]' does not have default value.
[/output.error]
  [/if]
[/for]
[/template]

[template public assignDefaultFields Attribute... as]
[for a in as if a.encoding,
    inst = a.instantiation,
    el in inst.encoding.element if el.valueField]
[if el.code]
this.[inst.namer el.name] = [inst.codeOf el];
[/if]
[/for]
[/template]

[template public copyMethods Attribute a Invokable returnCopy]
[for type = a.containingType,
    inst = a.instantiation,
    el in inst.encoding.element if el.copy]

[if el.private]private [else]public [/if][if el.final]final [/if][type.typeImmutable.simple][type.generics.args] [inst.namer el.name]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] {
  [inst.typer el.type] newValue = [if el.oneLiner][inst.fragmentOf el][else]with_[inst.namer el.name]([for p in el.params][if not for.first], [/if][p.name][/for])[/if];
  if (this.[a.name] == newValue) return this;
  [returnCopy]
}
[if not el.oneLiner]

private [inst.typer el.type] with_[inst.namer el.name]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/if]
[/for]
[/template]

[template public builderCopyFrom Attribute a][a.instantiation.namer a.instantiation.encoding.builderCopy.name][/template]

[template public builderInit Attribute a]
[for inst = a.instantiation, el in inst.encoding.element if el.init]

[if not el.private]
/** [el.name]. */
[/if]
[if el.private]private [else]public [/if][if el.final]final [/if][builderReturnType a] [inst.namer el.name]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]return [builderReturnThis a][/inst.codeOf]
[/for]
[/template]

[template public builderStaticFields Attribute... as]
[for a in as if a.encoding,
    el in a.instantiation.encoding.element if el.builderStaticField]
[declareAuxiliaryField a.instantiation el]
[/for]
[/template]

[template public builderFields Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element if el.builderField]
[declareAuxiliaryField a.instantiation el]
  [/for]
[/template]

[template public builderHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.builderMethod]

[declareHelperMethod a.instantiation el]
[else if el.build]
  [if not el.oneLiner]

[declareHelperMethod a.instantiation el]
  [/if]
[/if]
  [/for]
[/template]

[template public valueHelperMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.valueMethod]

[declareHelperMethod a.instantiation el]
[else if not el.static]
  [if el.inlinable and (not el.oneLiner)]

[declareHelperMethod a.instantiation el]
  [/if]
[else if el.from]

[declareHelperMethod a.instantiation el]
[/if]
  [/for]
[/template]

[template public staticFields Attribute... as]
[for a in as if a.encoding,
    inst = a.instantiation,
    enc = inst.encoding,
    el in enc.element if el.staticField]
[declareAuxiliaryField inst el]
[/for]
[/template]

[template public staticMethods Attribute... as]
  [for a in as if a.encoding,
      el in a.instantiation.encoding.element]
[if el.staticMethod]

[declareHelperMethod a.instantiation el]
[else if el.static]
  [if el.inlinable and (not el.oneLiner)]

[declareHelperMethod a.instantiation el]
  [/if]
[/if]
  [/for]
[/template]

[template public accessor Attribute a]
[for inst = a.instantiation, el = inst.expose]
[a.access][inst.type] [a.names.get]() [inst.codeOf el]
[/for]
[/template]

[template public from Attribute a String expression][a.instantiation.fragmentOf a.instantiation.encoding.from expression][/template]

[template public string Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.string][/template]

[template public hash Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.hash][/template]

[template public equals Attribute a String expression][a.instantiation.fragmentOf a.instantiation.encoding.equals expression][/template]

[template public implType Attribute a][a.instantiation.typer a.instantiation.encoding.impl.type][/template]

[template public fromBuild Attribute a][a.instantiation.fragmentOf a.instantiation.encoding.build][/a.instantiation.fragmentOf][/template]

[template declareAuxiliaryField Inst inst Elem el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.typer el.type] [inst.namer el.name][if el.code] = [inst.codeOf el][/if];
[/template]

[template declareHelperMethod Inst inst Elem el]
[if el.private]private [else]public [/if][if el.static]static [/if][if el.final]final [/if][inst.ownTypeParams el][inst.typer el.type] [inst.namer el.name]([for p in el.params][if not for.first], [/if][inst.typer p.type] [p.name][/for])[throwsClause inst el] [inst.codeOf el]
[/template]

[template throwsClause Inst inst Elem el][if el.thrown]throws [for t in el.thrown][if not for.first], [/if][inst.typer t][/for][/if][/template]

[template builderReturnThis Attribute a][if a.containingType.innerBuilder.isExtending]([a.containingType.typeBuilder]) [/if]this[/template]

[template builderReturnType Attribute a][if a.containingType.innerBuilder.isExtending][a.containingType.typeBuilder][else][a.containingType.typeBuilder.simple][a.containingType.generics.args][/if][/template]
