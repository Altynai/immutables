[requirejs support('org/immutables/generate/template/support.js')]

[template generateImmutableNestingType(type)]
[if (type.packageName)]
package `type.packageName`;
[/if]

// Generated imports

/**
 * {@code `type.defName`} contains immutable implementation classes generated from
 * abstract value classes defined as nested inside {@link `type.name`}.
[foreach (let v in type.nestedChildren)]
 * @see #`v.defName`
[/foreach]
 */
@SuppressWarnings("all")
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"immutable.tjs", "`type.name`"})
`type.accessPrefix`final class `type.defName` {
  private `type.defName`() {}
[foreach (let v in type.nestedChildren)]
  [apply generateImmutableType(v, 'static ')]
[/foreach]
}
[/template]

[template generateImmutableSimpleType(type)]
[if (type.packageName)]
package `type.packageName`;
[/if]

// Generated imports
[apply generateImmutableType(type)]
[/template]

[template generateImmutableType(type, staticModifier)]

[let (setters = type.settableAttributes)]
/**
 * Immutable implementation of {@link `type.name`}.
 * <p>
 * Use static static factory methods to create instances: {@code of()} or
 * {@code builder()}.
 */
@SuppressWarnings("all")
@javax.annotation.ParametersAreNonnullByDefault
@javax.annotation.Generated({"immutable.tjs", "`type.name`"})
@javax.annotation.concurrent.Immutable
`type.accessPrefix``staticModifier`final class `type.defName`
    `type.inheritsKeyword` `type.name` {
[if (type.useSingleton)]
  
  private static final `type.defName` INSTANCE = checkPreconditions(new `type.defName`());
  
  /**
   * Returns default immutable singleton value of `type.defName` 
   * @return immutable instance of `type.name` 
   */
  public static `type.defName` of() {
    return INSTANCE;
  }
[/if]
[if (type.useInterned || type.generateOrdinalValue)]

  private static class InternProxy {
    final `type.defName` instance;
    
    InternProxy(`type.defName` instance) {
      this.instance = instance;
    }

    public boolean equals(Object another) {
      return instance.equalTo(((InternProxy) another).instance);
    }
    
    public int hashCode() {
      return instance.computeHashCode();
    }
  }
[/if]
[if (type.generateOrdinalValue)]

  /**
   * Copy constructor used for interning of objects implementing
   * {@link org.immutables.common.collect.OrdinalValue}
   */
  private `type.defName`(`type.defName` instance, int ordinal) {
  [foreach (let v in type.implementedAttributes)]
    this.`v.name` = instance.`v.name`;
  [/foreach]
  [if (type.usePrehashed)]
    this.hashCode = instance.hashCode;
  [/if]
    this.domain = instance.domain;
    this.ordinal = ordinal;
  }

  /**
   * Instances of {@code `type.defName`} will be interned and registered with the domain.
   */
  public static final class Domain
      extends org.immutables.common.collect.internal.InterningOrdinalDomain<InternProxy, `type.name`> {
    
    private static final Domain INSTANCE = new Domain();

    /** Construct ordinal domain of `type.name` values. */
    public Domain() {
    }
      
    protected `type.name` extractValue(InternProxy proxy, int ordinal) {
      return new `type.defName`(proxy.instance, ordinal);
    }
    @Override
    public String toString() {
      if (this == INSTANCE) {
        return "`type.defName`.Domain.get()";
      }
      return com.google.common.base.MoreObjects.toStringHelper("`type.defName`.Domain")
        .add("length", length())
        .toString();
    }
    
    /**
     * Gets static singleton instance of {@link OrdinalDomain}.
     * All instances that was not build with specified domain will be bound to static domain.
     * @return ordinal domain of all instances
     */
    public static Domain get() {
      return INSTANCE;
    }
  }
  
  @Override
  public org.immutables.common.collect.OrdinalDomain<`type.name`> domain() {
    return domain;
  }
  
  private static `type.defName` intern(`type.defName` instance) {
    return (`type.defName`) instance.domain.internOrdinal(new InternProxy(instance));
  }
[elseif (type.useInterned)]

  private static final com.google.common.collect.Interner<InternProxy> INTERNER = com.google.common.collect.Interners.newStrongInterner();
  
  private static `type.defName` intern(`type.defName` instance) {
    return INTERNER.intern(new InternProxy(instance)).instance;
  }
[/if]
[if (type.useConstructor)]

  /**
   * Constructs new immutable instance of `type.name`.
[foreach (let v in type.constructorArguments)]
   * @param `v.name` value for {@code `v.name`}
[/foreach]
   * @return immutable `type.name` instance
   */
  public static `type.defName` of(`[ (v.type + ' ' + v.name) for each (v in type.constructorArguments) ].join(', ') `) {
    return checkPreconditions(new `type.defName`(` [ v.name for each (v in type.constructorArguments) ].join(', ') `));
  }
[/if]

  private static `type.defName` checkPreconditions(`type.defName` instance) {
[if (type.validationMethodName)]
    instance.`type.validationMethodName`();
[/if]
[if (type.useInterned || type.generateOrdinalValue)]
    instance = intern(instance);
[/if]
    return instance;
  }
[apply generateImmutable(type)]
[if (type.useBuilder)]

  /**
   * Creates builder for {@link `type.name`}.
   * @return new `type.name` builder
   */
  public static Builder builder() {
    return new Builder();
  }
  [apply generateBuilder(type)]
[/if]
[apply generateLazyValues(type)]
[if (type.hasNestedChildren)]
[foreach (let v in type.nestedChildren)]
  [apply generateImmutableType(v, 'static ')]
[/foreach]
[/if]
}
[/let]
[/template]

[template generateLazyValues(type)]
  [let(laziers = type.lazyAttributes)]
    [if (laziers.length)] 

  @javax.annotation.concurrent.GuardedBy("this")
  private volatile int lazyBitmap;
# let lazyIndex = 0;
[foreach (let l in laziers)]
# let lazyMask = 1 << (lazyIndex++)
# let maskConstantName = l.name.toUpperCase() + '_LAZILY_INITIALIZED_BIT'

  private static final int `maskConstantName` = `lazyMask`;

  @javax.annotation.concurrent.GuardedBy("this")
  private `l.type` `l.name`;

  @Override
  public `l.type` `l.name`() {
    if ((lazyBitmap & `maskConstantName`) == 0) {
      synchronized (this) {
        if ((lazyBitmap & `maskConstantName`) == 0) {
            [if (l.primitive)]
          this.`l.name` = super.`l.name`();
            [else]
          this.`l.name` = com.google.common.base.Preconditions.checkNotNull(super.`l.name`());
            [/if]
          lazyBitmap |= `maskConstantName`;
        }
      }
    }
    return `l.name`;
  }
[/foreach]
    [/if]
  [/let]
[/template]

[template generateBuilder(type)]

[let(setters = type.settableAttributes, getters = type.implementedAttributes)]
/**
 * Builds instances of {@link `type.name`}.
 * Builder is not thread safe and generally should not be stored in fields and collections,
 * but used immediately to create instances.
 */
@javax.annotation.concurrent.NotThreadSafe
[if (type.hasAbstractBuilder)]
`type.accessPrefix`static final class Builder
    extends `type.name`.Builder {
[else]
`type.accessPrefix`static final class Builder {
[/if]
  private static final String REQUIRED_ATTRIBUTE =
      "Cannot build `type.name`: required attribute '%s' is not set";

  [foreach (let v in setters)]
[if (v.collectionType)]
  private com.google.common.collect.Immutable`v.rawCollectionType`.Builder<`v.elementType`> `v.name`Builder =
      com.google.common.collect.Immutable`v.rawCollectionType`.builder();
[elseif (v.optionalType)]
  private `v.type` `v.name` = com.google.common.base.Optional.absent();
[elseif (v.mapType)]
  private com.google.common.collect.ImmutableMap.Builder<`v.wrappedElementType`, `v.wrappedSecondaryElementType`> `v.name`Builder =
      com.google.common.collect.ImmutableMap.builder();
[elseif (v.primitive)]
  private `v.type` `v.name`;
  private boolean `v.name`IsSet;
[else]
  @javax.annotation.Nullable  
  private `v.type` `v.name`;
[/if]
  [/foreach]
  [if (type.generateOrdinalValue)]
  private Domain domain = Domain.get();
  
  public Builder domain(Domain domain) {
    this.domain = com.google.common.base.Preconditions.checkNotNull(domain);
    return this;
  }
  [/if]

  private Builder() {
  }

  /**
   * Adjust builder with values from provided {@link `type.name`} instance.
   * Absent optional values will not be copied (will not override current).
   * Collection elements will be added, not replaced.
   * @param fromInstance instance to copy values from
   * @return {@code this} builder for chained invocation
   */
  public Builder copy(`type.name` fromInstance) {
    com.google.common.base.Preconditions.checkNotNull(fromInstance);
  [foreach (let v in setters)]
    [if (v.collectionType)]
    addAll`v.name.toUpperFirst()`(fromInstance.`v.name`());
    [elseif (v.optionalType)]
    `v.type` optional`v.name.toUpperFirst()` = fromInstance.`v.name`();
    if (optional`v.name.toUpperFirst()`.isPresent()) {
      `v.name` = optional`v.name.toUpperFirst()`;
    }
    [elseif (v.mapType)]
    putAll`v.name.toUpperFirst()`(fromInstance.`v.name`());
    [else]
    `v.name`(fromInstance.`v.name`());
    [/if]
  [/foreach]
    return this;
  }
  [foreach (let v in setters)]
  [if (v.collectionType)]

  /**
   * Adds one element to {@link `type.name`#`v.name`()} `v.rawCollectionType.toLowerCase()`.
   * @param `v.name`Element single `v.name` element
   * @return {@code this} builder for chained invocation
   */
  public Builder add`v.name.toUpperFirst()`(`v.unwrappedElementType` `v.name`Element) {
    `v.name`Builder.add(`v.name`Element);
    return this;
  }

  /**
   * Adds elements to {@link `type.name`#`v.name`()} `v.rawCollectionType.toLowerCase()`.
   * @param `v.name`Elements iterable of `v.name` elements
   * @return {@code this} builder for chained invocation
   */
  public Builder addAll`v.name.toUpperFirst()`(Iterable<`v.consumedElementType`> `v.name`Elements) {
    `v.name`Builder.addAll(`v.name`Elements);
    return this;
  }
  [elseif (v.optionalType)]

  /**
   * Initializes present value for optional {@link `type.name`#`v.name`()}.
   * @param `v.name` value for `v.name`, non-null
   * @return {@code this} builder for chained invocation
   */
  public Builder `v.name`(`v.unwrappedElementType` `v.name`) {
    this.`v.name`(Optional.of(`v.name`));
    return this;
  }
  
  /**
   * Initializes optional value for {@link `type.name`#`v.name`()}.
   * @param `v.name` value for `v.name`, non-null
   * @return {@code this} builder for chained invocation
   */
  public Builder `v.name`(Optional<`v.wrappedElementType`> `v.name`) {
    this.`v.name` = com.google.common.base.Preconditions.checkNotNull(`v.name`);
    return this;
  }
  [elseif (v.mapType)]
    [let (GE = v.consumedElementType, UK = v.unwrappedElementType, WK = v.wrappedElementType, UV = v.unwrappedSecondaryElementType, WV = v.wrappedSecondaryElementType)]

  /**
   * Put one entry to {@link `type.name`#`v.name`()} map.
   * @param key the key in `v.name` map
   * @param value the associated value in `v.name` map
   * @return {@code this} builder for chained invocation
   */
  public Builder put`v.name.toUpperFirst()`(`UK` key, `UV` value) {
    `v.name`Builder.put(key, value);
    return this;
  }
  
  /**
   * Put one entry to {@link `type.name`#`v.name`()} map. Nulls are not permitted
   * @param entry the key and value entry
   * @return {@code this} builder for chained invocation
   */
  public Builder put`v.name.toUpperFirst()`(java.util.Map.Entry<`GE`, ? extends `WV`> entry) {
    `v.name`Builder.put(entry);
    return this;
  }

  /**
   * Put all mappings from specified map as entries to {@link `type.name`#`v.name`()} map. Nulls are not permitted
   * @param `v.name`Entries to be added to `v.name` map
   * @return {@code this} builder for chained invocation
   */
  public Builder putAll`v.name.toUpperFirst()`(java.util.Map<`GE`, ? extends `WV`> `v.name`Entries) {
    `v.name`Builder.putAll(`v.name`Entries);
    return this;
  }

    [/let]
  [else]
  
  /**
   * Initializes value for {@link `type.name`#`v.name`()}.
  [if (v.generateDefault)]
   * <p><em>If not set, this attribute will have {@link `type.name`#`v.name`() default value}.</em>
  [/if]
   * @param `v.name` value for `v.name`, non-null
   * @return {@code this} builder for chained invocation
   */
  public Builder `v.name`(`v.type` `v.name`) {
    [if (v.primitive)]
    this.`v.name` = `v.name`;
    `v.name`IsSet = true;
    [else]
    this.`v.name` = com.google.common.base.Preconditions.checkNotNull(`v.name`);
    [/if]
    return this;
  }
  [/if]
  [/foreach]
  
  /**
   * Builds new {@link `type.name`}.
   * @return immutable instance of `type.name`
   */
  public `type.defName` build() {
    [foreach (let v in setters)]
  [if (!v.generateDefault)]
    [if (v.primitive)]
    com.google.common.base.Preconditions.checkState(`v.name`IsSet, REQUIRED_ATTRIBUTE, "`v.name`");
    [elseif (!v.containerType)]
    com.google.common.base.Preconditions.checkState(`v.name` != null, REQUIRED_ATTRIBUTE, "`v.name`");
    [/if]
  [/if]
    [/foreach]
    return checkPreconditions(new `type.defName`(this));
  }
}
[/let]
[/template]

[template generateConstructorDefaultAttibutes(type, attributes)]
[foreach (let v in attributes)]
[let (n = v.name)]
  [if (v.optionalType)]
this.`n` = com.google.common.base.Optional.absent();
  [elseif (v.mapType)]
this.`n` = com.google.common.collect.ImmutableMap.of();
  [elseif (v.collectionType)]
this.`n` = com.google.common.collect.Immutable`v.rawCollectionType`.of();  
  [elseif (v.primitive && v.generateDefault)]
this.`n` = super.`n`();
  [elseif (v.generateDefault)]
this.`n` = com.google.common.base.Preconditions.checkNotNull(super.`n`());
  [/if]
  [if (v.generateDerived)]
    [if (v.primitive)]
this.`n` = super.`n`();
    [else]
this.`n` = com.google.common.base.Preconditions.checkNotNull(super.`n`());
    [/if]
  [/if]
[/let]
[/foreach]
[/template]

[template generateImmutable(type)]
[let (setters = type.settableAttributes, getters = type.implementedAttributes)]

[foreach (let v in getters)]
  private final `v.implementationType` `v.name`;
[/foreach]
[if (type.usePrehashed)]
  private final int hashCode;
[/if]
[if (type.generateOrdinalValue)]
  private final int ordinal;
  private final Domain domain;
[/if]
[if (type.useSingleton)]

  private `type.defName`() {
    [apply generateConstructorDefaultAttibutes(type, type.implementedAttributes)]
    [apply generateAfterConstruction(type)]
  }
[/if]
[if (type.useConstructor)]

  private `type.defName`(`[ (v.type + ' ' + v.name) for each (v in type.constructorArguments) ].join(', ') `) {
[foreach (let v in type.constructorArguments)]
[let (n = v.name)]
  [if (v.collectionType || v.mapType)]
    this.`n` = `support.wrappingImmutableCollection(v, n)`;
  [elseif (v.primitive)]
    this.`n` = `n`;
  [else]
    this.`n` = com.google.common.base.Preconditions.checkNotNull(`n`);
  [/if]
[/let]
[/foreach]
    [apply generateConstructorDefaultAttibutes(type, type.constructorOmited)]
    [apply generateAfterConstruction(type)]
  }
[/if]
[if (type.useBuilder)]

  private `type.defName`(Builder builder) {
[foreach (let v in getters)]
[if (!v.generateDerived)]
[let (n = v.name)]
  [if (v.generateEnumSet || v.generateOrdinalValueSet || v.generateEnumMap)]
    this.`n` = `support.wrappingImmutableCollection(v, 'builder.' + n + 'Builder.build()')`;
  [elseif (v.collectionType || v.mapType)]
    this.`n` = builder.`n`Builder.build();
  [elseif (!v.generateDefault)]
    this.`n` = builder.`n`;
  [/if]  
[/let]
[/if]
[/foreach]
[-- Generate default values comes after required values]
[foreach (let v in getters)]
[let (n = v.name)]
[if (v.primitive && v.generateDefault)]
    this.`n` = builder.`n`IsSet
        ? builder.`n`
        : super.`n`();
[elseif (v.generateDefault)]
    this.`n` = builder.`n` != null
        ? builder.`n`
        : super.`n`();
[elseif (v.primitive && v.generateDerived)]
    this.`n` = super.`n`();
[elseif (v.generateDerived)]
    this.`n` = com.google.common.base.Preconditions.checkNotNull(super.`n`());
[/if]
[/let]
[/foreach]
    [apply generateAfterConstruction(type, true)]
  }
[/if]
[if (type.useCopyMethods)]

  private `type.defName`(
      `type.defName` copiedInstance` (getters.length ? ',' : '') `
      `[ (v.implementationType + ' ' + v.name) for each (v in getters) ].join(', ') `) {
  [foreach (let v in getters)]
    this.`v.name` = `v.name`;
  [/foreach]
    [apply generateAfterConstruction(type)]
  }
  [apply generateCopyMethods(type)]
[/if]
  [apply generateAccessorMethods(type)]
  [apply generateObjectUtilityMethods(type)]
[/let]
[/template]

[template generateAccessorMethods(type)]
[let (getters = type.implementedAttributes)]
  [foreach (let v in getters)]

@Override
public `v.implementationType` `v.name`() {
  return `v.name`;
}
  [/foreach]
[apply generateGetters(type)]
  [if (type.generateOrdinalValue)]

@Override
public int ordinal() {
  return ordinal;
}
  [/if]
[/let]
[/template]

[template generateObjectUtilityMethods(type)]
[let (getters = type.equivalenceAttributes)]
[if (!type.equalToDefined)]

@Override
public boolean equals(Object another) {
  [if (type.useInterned || type.generateOrdinalValue)]
  return this == another;
  [else]
  return this == another
      || (another instanceof `type.defName` && equalTo((`type.defName`) another));
  [/if]
}
[/if]

private boolean equalTo(`type.defName` another) {
  return true`[ '\n          && ' + support.compareFields(v) for each (v in getters) ].join('')`;
}

private int computeHashCode() {
  [if (getters.length == 0)]
  return "`type.name`".hashCode();
  [else]
  int h = 31;
[foreach (let v in getters)]
[if (!v.primitive)]
  h = h * 17 + `v.name`.hashCode();
[elseif (v.primitive && v.type == 'int')]
  h = h * 17 + `v.name`;
[else]
  h = h * 17 + com.google.common.primitives.`v.type.toUpperFirst()`s.hashCode(`v.name`);
[/if]
[/foreach]
  return h;
  [/if]
}
[if (!type.hashCodeDefined)]  

@Override
public int hashCode() {
  [if (type.usePrehashed)]
  return hashCode;
  [else]
  return computeHashCode();
  [/if]
}
[/if]
[/let]
[apply generateToString(type)]
[/template]

[template generateToString(type)]
[if (!type.toStringDefined)]

@Override
public String toString() {
  return com.google.common.base.MoreObjects.toStringHelper("`type.simpleName`")
  [foreach (let v in type.equivalenceAttributes)]
      .add("`v.name`", `v.name`())
  [/foreach]
      .toString();
}
[/if]
[/template]

[template generateAfterConstruction(type, usingBuilder)]
  [if (type.usePrehashed)]
this.hashCode = this.computeHashCode();
  [/if]
  [if (type.generateOrdinalValue)]
[-- Assigning dummy ordinal value to be changed on interning --]
this.ordinal = 0;
    [if (usingBuilder)]
this.domain = builder.domain;
    [else]
[-- Default static ordinal domain --]
this.domain = Domain.get();
    [/if]
  [/if]
[/template]

[template generateReturnCopyContextualInternal(getters, name)]
# let parameters = getters.map(function(a) a.name == name ? (a.name + 'ModifiedValue') : ('this.' + a.name))
this`[''].concat(parameters).join(',\n' + __.indent)`));
[/template]

[template generateReturnCopyContextual(type, getters, modifiedValueName)]
return checkPreconditions(new `type.defName`(
    [apply generateReturnCopyContextualInternal(getters, modifiedValueName)]
[/template]

[template generateCopyMethods(type)]
[let (setters = type.settableAttributes, getters = type.implementedAttributes)]
  [foreach (let v in setters)]
    [if (v.collectionType)]

/**
 * Copy current immutable object with elements that replace content of {@link `type.name`#`v.name`()}.
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param `v.name`Elements iterable of `v.name` elements to add
 * @return modified copy of the {@code this} object
 */
public `type.defName` with`v.name.toUpperFirst()`(Iterable<`v.consumedElementType`> `v.name`) {
  if (this.`v.name` == `v.name`) {
    return this;
  }
  `v.implementationType` `v.name`ModifiedValue = `support.wrappingImmutableCollection(v, v.name)`;
  [apply generateReturnCopyContextual(type, getters, v.name)]
}
    [elseif (v.optionalType)]

/**
 * Copy current immutable object by setting present value for optional {@link `type.name`#`v.name`()}.
 * @param `v.name` value for `v.name`, non-null
 * @return modified copy of the {@code this} object
 */
public `type.defName` with`v.name.toUpperFirst()`(`v.unwrappedElementType` `v.name`) {
  `v.implementationType` `v.name`ModifiedValue = Optional.of(`v.name`);
  [apply generateReturnCopyContextual(type, getters, v.name)]
}

/**
 * Copy current immutable object by setting optional value for {@link `type.name`#`v.name`()}.
 * Shallow reference equality check on optional value is used to prevent copying of the same value by returning {@code this}.
 * @param `v.name` value for `v.name`, non-null
 * @return modified copy of the {@code this} object
 */
public `type.defName` with`v.name.toUpperFirst()`(Optional<`v.wrappedElementType`> `v.name`) {
  if (this.`v.name` == `v.name`) {
    return this;
  }
  `v.implementationType` `v.name`ModifiedValue = com.google.common.base.Preconditions.checkNotNull(`v.name`);
  [apply generateReturnCopyContextual(type, getters, v.name)]
}
    [elseif (v.mapType)]
    [let (GE = v.consumedElementType, UK = v.unwrappedElementType, WK = v.wrappedElementType, UV = v.unwrappedSecondaryElementType, WV = v.wrappedSecondaryElementType)]

/**
 * Copy current immutable object by replacing {@link `type.name`#`v.name`()} map with specified map.
 * Nulls are not permitted as keys or values.
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 * @param `v.name`Entries to be added to `v.name` map
 * @return modified copy of the {@code this} object
 */
public `type.defName` with`v.name.toUpperFirst()`(java.util.Map<`GE`, ? extends `WV`> `v.name`) {
  if (this.`v.name` == `v.name`) {
    return this;
  }
  `v.implementationType` `v.name`ModifiedValue = `support.wrappingImmutableCollection(v, v.name)`;
  [apply generateReturnCopyContextual(type, getters, v.name)]
}
    [/let]
    [else]
  
/**
 * Copy current immutable object by setting value for {@link `type.name`#`v.name`()}.
 [if (v.primitive && !v.floatType)]
 * Value equality check is used to prevent copying of the same value by returning {@code this}.
 [elseif (!v.primitive)]
 * Shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
 [/if]
 * @param `v.name` value for `v.name`, non-null
 * @return modified copy of the {@code this} object
 */
public `type.defName` with`v.name.toUpperFirst()`(`v.type` `v.name`) {
    [if (!v.floatType)]
  if (this.`v.name` == `v.name`) {
    return this;
  }
    [/if]
    [if (v.primitive)]
  `v.implementationType` `v.name`ModifiedValue = `v.name`;
    [else]
  `v.implementationType` `v.name`ModifiedValue = com.google.common.base.Preconditions.checkNotNull(`v.name`);
    [/if]
  [apply generateReturnCopyContextual(type, getters, v.name)]
}
    [/if]
  [/foreach]
[/let]
[/template]

[template generateGetters(type)]
  [if(type.generateGetters)]
    [foreach (let v in type.allAccessibleAttributes)]

/**
 * Gets the value of {@link `type.name`#`v.name`()} attribute.
[if (v.optionalType)]
 * @return value of `v.name` if present, {@code null} if absent
[else]
 * @return value for `v.name`, non-null
[/if]
 */
  [foreach (let a in v.annotations)]
`a`
  [/foreach]
  [if (v.optionalType)]
@javax.annotation.Nullable
public `v.wrappedElementType` get`v.name.toUpperFirst()`() {
  return `v.name`().orNull();
}
  [else]
public `v.implementationType` `v.type == 'boolean'?'is':'get'``v.name.toUpperFirst()`() {
  return `v.name`();
}
  [/if]
    [/foreach]
  [/if]
[/template]
