[template generateMarshaler(type)]
package `type.packageName`;

import com.fasterxml.jackson.core.*;
import javax.annotation.*;
import java.io.IOException;
import org.immutables.common.marshal.Marshaler;
// Generated imports

/**
 * Marshaler that could marshal and unmarshal instances of {@code `type.name`}.
 * Uses Jackson JSON processor API.
 */
@SuppressWarnings("all")
@Generated({"marshaler.tjs", "`type.name`"})
@ParametersAreNonnullByDefault
`type.accessPrefix`final class `type.name`Marshaler
    extends Marshaler<`type.name`> {

  private static final `type.name`Marshaler INSTANCE = new `type.name`Marshaler();
  
  private `type.name`Marshaler() {
  }
  
  /**
   * Singleton marshaler that is bound to marshal and unmarshal instances of `type.name`.
   * @return marshaler
   */
  public static `type.name`Marshaler instance() {
    return INSTANCE;
  }
  
  /**
   * Unmarshal instance of {@link `type.name`}.
   * <p>
   * {@link JsonParser}'s current token should be {@link JsonToken#START_OBJECT}
   * and this method postcondition will current token equal {@link JsonToken#END_OBJECT}
   * @param parser jackson JSON parser
   * @param nullSample always {@code null}, used for static method overload resolution
   * @param expectedClass will be an {@code `type.name`.class}
   * @return instance of {@link `type.name`}
   * @throws IOException either IO failure or parsing problem
   */
  public static `type.name` unmarshal(
      @WillNotClose JsonParser parser,
      @Nullable `type.name` nullSample,
      Class<?> expectedClass) throws java.io.IOException {
    return Internal`type.name`Marshaling.unmarshal`type.name`(parser);
  }
  
  /**
   * Marshal instance of {@link `type.name`}.
   * <p>This method will itself write whole object including any opening and ending delimiters (braces) if needed.
   * @param generator jackson JSON generator
   * @param instance instance of {@link `type.name`}  to marshal
   * @throws IOException either IO failure or parsing problem
   */
  public static void marshal(
      @WillNotClose JsonGenerator generator,
      `type.name` instance) throws IOException {
    Internal`type.name`Marshaling.marshal`type.name`(generator, instance);
  }

  @Override
  public `type.name` unmarshalInstance(@WillNotClose JsonParser parser) throws IOException {
    return Internal`type.name`Marshaling.unmarshal`type.name`(parser);
  }

  @Override
  public void marshalInstance(@WillNotClose JsonGenerator generator, `type.name` instance) throws IOException {
    Internal`type.name`Marshaling.marshal`type.name`(generator, instance);
  }

  @Override
  public Iterable<`type.name`> unmarshalIterable(@WillNotClose JsonParser parser) throws IOException {
    return Internal`type.name`Marshaling.unmarshalIterableOf`type.name`(parser);
  }

  @Override
  public void marshalIterable(@WillNotClose JsonGenerator generator, Iterable<`type.name`> instance) throws IOException {
    Internal`type.name`Marshaling.marshalIterableOf`type.name`(generator, instance);
  }

  @Override
  public Class<`type.name`> getExpectedType() {
    return `type.name`.class;
  }
  
  @Override
  public String toString() {
    return "`type.name`Marshaler.instance()";
  }
}
[/template]

[template generateMarshaling(type)]
package `type.packageName`;

import com.fasterxml.jackson.core.*;
import javax.annotation.*;
import java.io.IOException;
// Generated imports
[apply generateImportRoutines(type)]
import static org.immutables.common.marshal.internal.BuiltinMarshalingRoutines.*;
import static org.immutables.common.marshal.internal.MarshalingSupport.*;

/**
 * Internal routines for marshaling and unmarshaling instances of `type.name`.
 * Uses Jackson JSON processor API. See {@code `type.name`Marshaler} for the entry point to this API
 */
@SuppressWarnings("all")
@Generated({"marshal.tjs", "`type.name`"})
@ParametersAreNonnullByDefault
final class Internal`type.name`Marshaling {
  private Internal`type.name`Marshaling() {
  }
  [apply generateMarshalingMethods(type)]
  [apply generateUnmarshalingMethods(type)]
}
[/template]

[template generateImportRoutines(type)]
[foreach (let s in type.generateMarshaledImportRoutines)]
import static `s`.*;
[/foreach]
[/template]

[template generateMarshalingMethods(type)]

static void marshalIterableOf`type.name`(JsonGenerator generator, Iterable<`type.name`> iterable)
    throws IOException {
  generator.writeStartArray();
  for (`type.name` instance : iterable) {
    marshal`type.name`(generator, instance);
  }
  generator.writeEndArray();
}

static void marshal`type.name`(JsonGenerator generator, `type.name` instance)
    throws IOException {
[if (type.useConstructorOnly)]
  [let (ca = type.constructorArguments)]
  [if (ca.length == 1)]
  [foreach (let a in ca)]
  [apply generateMarshalConstructorValue(type, a)]
  [/foreach]
  [else]
  generator.writeStartArray();
  [foreach (let a in ca)]
  [apply generateMarshalConstructorValue(type, a)]
  [/foreach]
  generator.writeEndArray();
  [/if]
  [/let]
[else]
  generator.writeStartObject();
  [foreach (let a in type.implementedAttributes)]
  [apply generateMarshalAttributeValue(type, a)];
  [/foreach]

  generator.writeEndObject();
[/if]
}
[/template]

[template generateMarshalConstructorValue(type, a)]
  [if (a.optionalType)]
`a.type` `a.name`Value = instance.`a.name`();
if (`a.name`Value.isPresent()) {
  `a.unwrappedElementType` unwrapped`a.name`Value = `a.name`Value.get();
  [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'unwrapped' + a.name + 'Value')]
} else {
  generator.writeNull();
}
  [elseif (a.mapType)]
`a.type` `a.name`Map = instance.`a.name`();
generator.writeStartObject();
for (java.util.Map.Entry<`a.wrappedElementType`,`a.wrappedSecondaryElementType`> e : `a.name`Map.entrySet()) {
    [-- only use toString with objects and boxed primitives ]
    generator.writeFieldName(marshalKey(e.getKey()));
  [-- here we assign to a unwrapped variable so overload resolution will precise ]
  `a.unwrappedSecondaryElementType` value = e.getValue();
  [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'value')]
}
generator.writeEndObject();
  [elseif (a.collectionType)]
generator.writeStartArray();
for (`a.unwrappedElementType` e : instance.`a.name`()) {
  [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'e')]
}
generator.writeEndArray();
  [else]
[apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'instance.' + a.name + '()')]
  [/if]
[/template]

[template generateMarshalAttributeValue(type, a)]

  [if (a.optionalType)]
`a.type` `a.name`Value = instance.`a.name`();
if (`a.name`Value.isPresent()) {
  generator.writeFieldName("`a.marshaledName`");
  `a.unwrappedElementType` unwrapped`a.name`Value = `a.name`Value.get();
  [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'unwrapped' + a.name + 'Value')]
    [if (a.forceEmpty)]
} else {
  generator.writeNullField("`a.marshaledName`");
    [/if]
}
  [elseif (a.mapType)]
`a.type` `a.name`Map = instance.`a.name`();
if (!`a.name`Map.isEmpty()) {
  generator.writeObjectFieldStart("`a.marshaledName`");
  for (java.util.Map.Entry<`a.wrappedElementType`,`a.wrappedSecondaryElementType`> e : `a.name`Map.entrySet()) {
    [-- only use toString with objects and boxed primitives ]
    generator.writeFieldName(marshalKey(e.getKey()));
    [-- here we assign to a unwrapped variable so overload resolution will precisely ]
    `a.unwrappedSecondaryElementType` value = e.getValue();
    [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'value')]
  }
  generator.writeEndObject();
    [if (a.forceEmpty)]
} else {
  generator.writeObjectFieldStart("`a.marshaledName`");
  generator.writeEndObject();
    [/if]
}
  [elseif (a.collectionType)]
`a.type` `a.name`Collection = instance.`a.name`();
if (!`a.name`Collection.isEmpty()) {
  generator.writeArrayFieldStart("`a.marshaledName`");
  for (`a.unwrappedElementType` e : `a.name`Collection) {
    [apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'e')]
  }
  generator.writeEndArray();
    [if (a.forceEmpty)]
} else {
  generator.writeArrayFieldStart("`a.marshaledName`");
  generator.writeEndArray();
    [/if]
}
  [else]
generator.writeFieldName("`a.marshaledName`");
[apply generatePossiblyPolymorphicTypeMarshalAttributeValue(type, a, 'instance.' + a.name + '()')]
  [/if]
[/template]

[template generateUnmarshalingMethods(type)]

private static void ensure(boolean condition, String attributeName, String attributeType, Object message) {
  ensureCondition(
      condition,
      "`type.name`",
      attributeName,
      attributeType,
      message);
}

static Iterable<`type.name`> unmarshalIterableOf`type.name`(JsonParser parser)
    throws IOException {
  java.util.List<`type.name`> result = com.google.common.collect.Lists.newArrayList();
  JsonToken t = parser.getCurrentToken();
  if (t == JsonToken.START_OBJECT) {
    [-- Special case for array encoded as objects {'0':{..}, '1':{..}} faced with BSON ]
    while ((t = parser.nextToken()) != JsonToken.END_OBJECT) {
      ensure(t == JsonToken.FIELD_NAME, "*", "", t);
      parser.nextToken();
      result.add(unmarshal`type.name`(parser));
    }
  } else {
    ensure(t == JsonToken.START_ARRAY, "*", "List<`type.name`>", t);
    while ((t = parser.nextToken()) != JsonToken.END_ARRAY) {
      result.add(unmarshal`type.name`(parser));
    }
  }
  return result;
}

[if (type.useConstructorOnly)]
[let (ca = type.constructorArguments)]
private static JsonParser nextTokenAdvance(JsonParser parser) throws IOException {
  parser.nextToken();
  return parser;
}

static `type.name` unmarshal`type.name`(JsonParser parser)
    throws IOException {
[if (ca.length == 1)]
  [foreach (let a in ca)]
  return Immutable`type.name`.of(unmarshalConstructorArgument`a.name.toUpperFirst()`(parser));
  [/foreach]
[else]
  JsonToken t = parser.getCurrentToken();
  ensure(t == JsonToken.START_ARRAY, "of [", "", t);
  `type.name` instance = Immutable`type.name`.of(
  [foreach (let a in ca)]
    `nextComma` unmarshalConstructorArgument`a.name.toUpperFirst()`(nextTokenAdvance(parser))
  [/foreach]
  );
  ensure(parser.nextToken() == JsonToken.END_ARRAY, "]", "", parser.getCurrentToken());
  return instance;
[/if]
}
[foreach (let a in ca)]
[apply generateConstructorArgumentUnmarshal(type, a)]
[/foreach]
[/let]
[else]    

static `type.name` unmarshal`type.name`(JsonParser parser)
    throws IOException {
  Immutable`type.name`.Builder builder = Immutable`type.name`.builder();
  String attributeName = "";
  try {
    JsonToken t = parser.getCurrentToken();
    ensure(t == JsonToken.START_OBJECT, "new {", "", t);
    while ((t = parser.nextToken()) != JsonToken.END_OBJECT) {
      ensure(t == JsonToken.FIELD_NAME, "*", "", t);
      attributeName = parser.getText();
      unmarshalAttribute(parser, builder, attributeName);
    }
  } catch (JsonParseException jsonParse) {
    ensure(false, attributeName, "?", jsonParse.getMessage());
  }
  return builder.build();  
}

private static void unmarshalAttribute(JsonParser parser, Immutable`type.name`.Builder builder, String attributeName)
    throws IOException {
  switch(attributeName) {
  [foreach (let s in type.settableAttributes)]
  case "`s.marshaledName`":
    unmarshalAttribute`s.name.toUpperFirst()`(parser, builder);
    break;
  [/foreach]
  default:
    unmarshalUnknownAttribute(parser, attributeName);
  }
}

private static void unmarshalUnknownAttribute(JsonParser parser, String attributeName)
    throws IOException {
  JsonToken t = parser.nextToken();
  if (!t.isScalarValue()) {
    parser.skipChildren();
  }
}
[foreach (let s in type.settableAttributes)]  
[apply generateUnmarshalAttribute(type, s)]
[/foreach]
[/if]
[/template]

[template generateConstructorArgumentUnmarshal(type, a)]

private static `a.type` unmarshalConstructorArgument`a.name.toUpperFirst()`(JsonParser parser)
    throws IOException {
  [if (a.primitive)]
  JsonToken t = parser.getCurrentToken();
  ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
    [if (a.type == 'char')]
  return parser.getText().charAt(0);
    [else]
  return parser.get`a.type.toUpperFirst()`Value();  
    [/if]
  [elseif (a.mapType)]
  return unmarshalMap`a.name.toUpperFirst()`(parser);
  [else]
  [apply generateConstructorArgumentComplexUnmarshal(type, a)]
  [/if]
}
  [if (a.mapType)]
[apply generateMapUnmarshalMethod(type, a)]
  [/if]
[/template]

[template generateConstructorArgumentComplexUnmarshal(type, a)]
JsonToken t = parser.getCurrentToken();
  [if (a.optionalType)]
if (t != JsonToken.VALUE_NULL) {
    [if (a.unwrappedElementPrimitiveType)]
  ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
  return Optional.<`a.elementType`>of(parser.get`a.unwrappedElementType.toUpperFirst()`Value());
    [else]
  [apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.wrappedElementType, a.unwrapperOrRawElementType)]
  return Optional.of(value);
    [/if]
}
return Optional.absent();
  [elseif (a.collectionType)]
java.util.List<`a.elementType`> elements = com.google.common.collect.Lists.newArrayList();  
[apply generateCollectionUnmarshalCode(type, a, 'elements.add')]
return com.google.common.collect.Immutable`a.rawCollectionType`.copyOf(elements);
  [else]
[apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.type, a.rawType)]
return value;
  [/if]
[/template]

[template generateUnmarshalAttribute(type, a)]

private static void unmarshalAttribute`a.name.toUpperFirst()`(JsonParser parser, Immutable`type.name`.Builder builder)
    throws IOException {
  [if (a.primitive)]
  ensure(parser.nextToken().isScalarValue(), "`a.name`", "`a.type`", parser.getCurrentToken());
    [if (a.type == 'char')]
  builder.`a.name`(parser.getText().charAt(0));
    [else]
  builder.`a.name`(parser.get`a.type.toUpperFirst()`Value());  
    [/if]
  [elseif (a.mapType)]
  parser.nextToken();
  builder.putAll`a.name.toUpperFirst()`(unmarshalMap`a.name.toUpperFirst()`(parser));
  [else]
  [apply generateComplexTypeUnmarshalAttribute(type, a)]
  [/if]
}
[if (a.mapType)]
[apply generateMapUnmarshalMethod(type, a)]
[/if]
[/template]

[template generateMapUnmarshalMethod(type, a)]

private static `a.type` unmarshalMap`a.name.toUpperFirst()`(JsonParser parser)
    throws IOException {
  JsonToken t = parser.getCurrentToken();
  if (t == JsonToken.VALUE_NULL) {
    return ImmutableMap.of();
  }
  ensure(t == JsonToken.START_OBJECT, "`a.name`", "`a.type`", t);
  com.google.common.collect.ImmutableMap.Builder<`a.wrappedElementType`, `a.wrappedSecondaryElementType`> builder = ImmutableMap.builder();

  while((t = parser.nextToken()) != JsonToken.END_OBJECT) {
    ensure(t == JsonToken.FIELD_NAME, "`a.name`[*]", "`a.type`", t);
[if (a.unwrappedElementPrimitiveType)]
  [if (a.unwrappedElementType == 'char')]
    String rawKey = parser.getText();
    if (rawKey.length() != 1) {
      ensure(false, "`a.name`[" + rawKey + "]", "`a.type`[char]", rawKey);
    }
    char key = rawKey.charAt(0);
  [else]
    `a.unwrappedElementType` key = `a.wrappedElementType`.parse`a.unwrappedElementType.toUpperFirst()`(parser.getText());
  [/if]
[elseif (a.wrappedElementType == 'java.lang.String')]
    `a.wrappedElementType` key = parser.getText();
[else]
    `a.wrappedElementType` key = unmarshal(parser, (`a.wrappedElementType`) null, `a.unwrapperOrRawElementType`.class);
[/if]
    t = parser.nextToken();
[if (a.unwrappedSecondaryElementPrimitiveType)]
    ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
    `a.unwrappedSecondaryElementType` value = parser.get`a.unwrappedSecondaryElementType.toUpperFirst()`Value();
[elseif (a.wrappedSecondaryElementType == 'java.lang.String')]
    String value = parser.getText();
[else]
    [apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.wrappedSecondaryElementType, a.unwrapperOrRawSecondaryElementType)]
[/if]
    builder.put(key, value);
  }
    
  return builder.build();
}
[/template]

[template generateCollectionUnmarshalCode(type, a, collectorExpression)]
  [if (a.unwrappedElementPrimitiveType)]
if (t == JsonToken.START_ARRAY) {
  while((t = parser.nextToken()) != JsonToken.END_ARRAY) {
    ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
    `collectorExpression`(parser.get`a.unwrappedElementType.toUpperFirst()`Value());
  }
} else if (t != JsonToken.VALUE_NULL) {
  ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
  `collectorExpression`(parser.get`a.unwrappedElementType.toUpperFirst()`Value());
}
  [else]
if (t == JsonToken.START_ARRAY) {
  while((t = parser.nextToken()) != JsonToken.END_ARRAY) {
    [apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.wrappedElementType, a.unwrapperOrRawElementType)]
    `collectorExpression`(value);
  }
} else if (t != JsonToken.VALUE_NULL) {
  [apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.wrappedElementType, a.unwrapperOrRawElementType)]
  `collectorExpression`(value);
}
  [/if]
[/template]

[template generateComplexTypeUnmarshalAttribute(type, a)]
JsonToken t = parser.nextToken();
  [if (a.optionalType)]
if (t != JsonToken.VALUE_NULL) {
    [if (a.unwrappedElementPrimitiveType)]
  ensure(t.isScalarValue(), "`a.name`", "`a.type`", t);
  builder.`a.name`(parser.get`a.unwrappedElementType.toUpperFirst()`Value());
    [else]
  [apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.wrappedElementType, a.unwrapperOrRawElementType)]
  builder.`a.name`(value);
    [/if]
}
  [elseif (a.mapType)]
  [elseif (a.collectionType)]
[apply generateCollectionUnmarshalCode(type, a, 'builder.add' + a.name.toUpperFirst())]
  [else]
[apply generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, a, a.type, a.rawType)]
builder.`a.name`(value);
  [/if]
[/template]

[template generatePossiblyPolymorphicTypeUnmarshalAttributeValue(type, attribute, genericType, rawType)]
`genericType` value =
[let (cx = attribute.expectedSubclasses)]
  [if (cx.length != 0)]
    (`genericType`) unmarshalWithOneOfMarshalers(parser, "`type.name`", "`attribute.name`", "`genericType`"
    [foreach (let c in cx)]
        , `c`Marshaler.instance()
    [/foreach]
        );
  [else]
    unmarshal(parser, (`genericType`) null, `rawType`.class);
  [/if]
[/let]
[/template]

[template generatePossiblyPolymorphicTypeMarshalAttributeValue(type, attribute, variableName)]
[let (cx = attribute.expectedSubclasses)]
  [if (cx.length != 0 && !attribute.primitive)]
marshalWithOneOfMarshalers(generator, `variableName`
    [foreach (let c in cx)]
    , `c`Marshaler.instance()
    [/foreach]
    );
  [else]
marshal(generator, `variableName`);
  [/if]
[/let]
[/template]