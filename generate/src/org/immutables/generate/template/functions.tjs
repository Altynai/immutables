[template generateFunctions(type)]
[if (type.packageName)]
package `type.packageName`;
[/if]

// Generated imports

/**
 * Projection functions and predicates that corresponds to attributes of {@link `type.name`}.
 */
@SuppressWarnings("all")
@javax.annotation.Generated({"functions.tjs", "`type.name`"})
@javax.annotation.ParametersAreNonnullByDefault
`type.accessPrefix`final class `type.simpleName`Functions {
  private `type.simpleName`Functions() {}
  [apply generateHelpers(type)]
}
[/template]

[template generateHelpers(type)]
[foreach (let h in type.helperAttributes)]
[if (h.generatePredicate)]

/**
 * Predicate on instance of `type.name` that evaluates attribute {@link `type.name`#`h.name`() `h.name`}.
 * @return predicate on `type.name` evaluates to '`h.name`' attribute
 */
public static com.google.common.base.Predicate<`type.name`> `h.name`() {
  return `h.name.toUpperFirst()`Predicate.INSTANCE;
}

private enum `h.name.toUpperFirst()`Predicate
    implements com.google.common.base.Predicate<`type.name`> {
  INSTANCE;
  @Override
  public boolean apply(`type.name` input) {
    return input.`h.name`();
  }
  @Override
  public String toString() {
    return "`type.name`s.`h.name`()";
  }
}
[/if]
[if (h.generateFunction)]

/**
 * Projection function from instance of `type.name` to it's attribute {@link `type.name`#`h.name`() `h.name`}.
 * @return function from `type.name` to `h.wrappedType` value of
 *         '`h.name`' attribute
 */
public static com.google.common.base.Function<`type.name`, `h.wrapperType`> `h.name`() {
  return `h.name.toUpperFirst()`Function.INSTANCE;
}

private enum `h.name.toUpperFirst()`Function
    implements com.google.common.base.Function<`type.name`, `h.wrapperType`> {
  INSTANCE;
  @Override
  public `h.wrapperType` apply(`type.name` input) {
    return input.`h.name`();
  }
  @Override
  public String toString() {
    return "`type.name`s.`h.name`()";
  }
}
[/if]
[/foreach]
[/template]
